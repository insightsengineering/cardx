[{"path":[]},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://insightsengineering.github.io/cardx/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla‚Äôs code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contribution Guidelines","title":"Contribution Guidelines","text":"üôè Thank taking time contribute! input deeply valued, whether issue, pull request, even feedback, regardless size, content scope.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"Contribution Guidelines","text":"üë∂ Getting started üìî Code Conduct üóÉ License üìú Issues üö© Pull requests üíª Coding guidelines üèÜ Recognition model ‚ùì Questions","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Contribution Guidelines","text":"Please refer project documentation brief introduction. Please also see articles within project documentation additional information.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contribution Guidelines","text":"Code Conduct governs project. Participants contributors expected follow rules outlined therein.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Contribution Guidelines","text":"contributions covered project‚Äôs license.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contribution Guidelines","text":"use GitHub track issues, feature requests, bugs. submitting new issue, please check issue already reported. issue already exists, please upvote existing issue üëç. new feature requests, please elaborate context benefit feature users, developers, relevant personas.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"github-flow","dir":"","previous_headings":"Pull requests","what":"GitHub Flow","title":"Contribution Guidelines","text":"repository uses GitHub Flow model collaboration. submit pull request: Create branch Please see branch naming convention . don‚Äôt write access repository, please fork . Make changes Make sure code passes checks imposed GitHub Actions well documented well tested unit tests sufficiently covering changes introduced Create pull request (PR) pull request description, please link relevant issue (), provide detailed description change, include assumptions. Address review comments, Post approval Merge PR write access. Otherwise, reviewer merge PR behalf. Pat back Congratulations! üéâ now official contributor project! grateful contribution.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"branch-naming-convention","dir":"","previous_headings":"Pull requests","what":"Branch naming convention","title":"Contribution Guidelines","text":"Suppose changes related current issue current project; please name branch follows: <issue_id>_<short_description>. Please use underscore (_) delimiter word separation. example, 420_fix_ui_bug suitable branch name change resolving UI-related bug reported issue number 420 current project. change affects multiple repositories, please name branches follows: <issue_id>_<issue_repo>_<short description>. example, 69_awesomeproject_fix_spelling_error reference issue 69 reported project awesomeproject aims resolve one spelling errors multiple (likely related) repositories.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"monorepo-and-stageddependencies","dir":"","previous_headings":"Pull requests","what":"monorepo and staged.dependencies","title":"Contribution Guidelines","text":"Sometimes might need change upstream dependent package(s) able submit meaningful change. using staged.dependencies functionality simulate monorepo behavior. dependency configuration already specified project‚Äôs staged_dependencies.yaml file. need name feature branches appropriately. exception branch naming convention described . Please refer staged.dependencies package documentation details.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"coding-guidelines","dir":"","previous_headings":"","what":"Coding guidelines","title":"Contribution Guidelines","text":"repository follows unified processes standards adopted maintainers ensure software development carried consistently within teams cohesively across repositories.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"style-guide","dir":"","previous_headings":"Coding guidelines","what":"Style guide","title":"Contribution Guidelines","text":"repository follows standard tidyverse style guide uses lintr lint checks. Customized lint configurations available repository‚Äôs .lintr file.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"dependency-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency management","title":"Contribution Guidelines","text":"Lightweight right weight. repository follows tinyverse recommedations limiting dependencies minimum.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"dependency-version-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency version management","title":"Contribution Guidelines","text":"code compatible (!) historical versions given dependenct package, required specify minimal version DESCRIPTION file. particular: development version requires (imports) development version another package - required put abc (>= 1.2.3.9000).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"r--package-versions","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"R & package versions","title":"Contribution Guidelines","text":"continuously test packages newest R version along recent dependencies CRAN BioConductor. recommend working environment also set way. can find details R version packages used R CMD check GitHub Action execution log - step prints R sessionInfo(). discover bugs older R versions older set dependencies, please create relevant bug reports.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"pre-commit","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"pre-commit","title":"Contribution Guidelines","text":"highly recommend use pre-commit tool combined R hooks pre-commit execute checks committing pushing changes. Pre-commit hooks already available repository‚Äôs .pre-commit-config.yaml file.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"recognition-model","dir":"","previous_headings":"","what":"Recognition model","title":"Contribution Guidelines","text":"mentioned previously, contributions deeply valued appreciated. contribution data available part repository insights, recognize significant contribution hence add contributor package authors list, following rules enforced: Minimum 5% lines code authored* (determined git blame query) top 5 contributors terms number commits lines added lines removed* *Excluding auto-generated code, including limited roxygen comments renv.lock files. package maintainer also reserves right adjust criteria recognize contributions.","code":""},{"path":"https://insightsengineering.github.io/cardx/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions","title":"Contribution Guidelines","text":"questions regarding contribution guidelines, please contact package/repository maintainer.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/cardx/SECURITY.html","id":"reporting-security-issues","dir":"","previous_headings":"","what":"Reporting Security Issues","title":"Security Policy","text":"believe found security vulnerability repositories organization, please report us coordinated disclosure. Please report security vulnerabilities public GitHub issues, discussions, pull requests. Instead, please send email vulnerability.management[@]roche.com. Please include much information listed can help us better understand resolve issue: type issue (e.g., buffer overflow, SQL injection, cross-site scripting) Full paths source file(s) related manifestation issue location affected source code (tag/branch/commit direct URL) special configuration required reproduce issue Step--step instructions reproduce issue Proof--concept exploit code (possible) Impact issue, including attacker might exploit issue information help us triage report quickly.","code":""},{"path":"https://insightsengineering.github.io/cardx/SECURITY.html","id":"data-security-standards-dss","dir":"","previous_headings":"","what":"Data Security Standards (DSS)","title":"Security Policy","text":"Please make sure reporting issues form bug, feature, pull request, sensitive information PII, PHI, PCI completely removed text attachments, including pictures videos.","code":""},{"path":"https://insightsengineering.github.io/cardx/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel D. Sjoberg. Author, maintainer. Abinaya Yogasekaram. Author. Emily de la Rua. Author. Malcolm Barrett. Contributor. F. Hoffmann-La Roche AG. Copyright holder, funder.","code":""},{"path":"https://insightsengineering.github.io/cardx/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sjoberg D, Yogasekaram , de la Rua E (2025). cardx: Extra Analysis Results Data Utilities. R package version 0.2.5.9002, https://github.com/insightsengineering/cardx.","code":"@Manual{,   title = {cardx: Extra Analysis Results Data Utilities},   author = {Daniel D. Sjoberg and Abinaya Yogasekaram and Emily {de la Rua}},   year = {2025},   note = {R package version 0.2.5.9002},   url = {https://github.com/insightsengineering/cardx}, }"},{"path":"https://insightsengineering.github.io/cardx/index.html","id":"cardx-","dir":"","previous_headings":"","what":"Extra Analysis Results Data Utilities","title":"Extra Analysis Results Data Utilities","text":"{cardx} package extension {cards} package, providing additional functions create Analysis Results Data Objects (ARDs) using R programming language. {cardx} package exports ARD functions uses utility functions {cards} statistical functions additional packages (, {stats}, {mmrm}, {emmeans}, {car}, {survey}, etc.) construct summary objects. Summary objects can used : Generate Tables visualizations Regulatory Submission easily R. Perfect presenting descriptive statistics, statistical analyses, regressions, etc. . Conduct Quality Control checks existing Tables R. Storing results test parameters supports re-use verification data analyses.","code":""},{"path":"https://insightsengineering.github.io/cardx/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extra Analysis Results Data Utilities","text":"Install cards CRAN : can install development version cards GitHub :","code":"install.packages(\"cardx\") # install.packages(\"devtools\") devtools::install_github(\"insightsengineering/cardx\")"},{"path":[]},{"path":"https://insightsengineering.github.io/cardx/index.html","id":"example-ard-creation","dir":"","previous_headings":"Examples","what":"Example ARD Creation","title":"Extra Analysis Results Data Utilities","text":"Example t-test: Note returned ARD contains analysis results addition function parameters used calculate results allowing reproducible future analyses customization.","code":"library(cardx)  cards::ADSL |>   # keep two treatment arms for the t-test calculation   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   cardx::ard_stats_t_test(by = ARM, variable = AGE) ## {cards} data frame: 14 x 9  ##    group1 variable   context   stat_name stat_label      stat ## 1     ARM      AGE stats_t_‚Ä¶    estimate  Mean Dif‚Ä¶     0.828 ## 2     ARM      AGE stats_t_‚Ä¶   estimate1  Group 1 ‚Ä¶    75.209 ## 3     ARM      AGE stats_t_‚Ä¶   estimate2  Group 2 ‚Ä¶    74.381 ## 4     ARM      AGE stats_t_‚Ä¶   statistic  t Statis‚Ä¶     0.655 ## 5     ARM      AGE stats_t_‚Ä¶     p.value    p-value     0.513 ## 6     ARM      AGE stats_t_‚Ä¶   parameter  Degrees ‚Ä¶   167.362 ## 7     ARM      AGE stats_t_‚Ä¶    conf.low  CI Lower‚Ä¶    -1.668 ## 8     ARM      AGE stats_t_‚Ä¶   conf.high  CI Upper‚Ä¶     3.324 ## 9     ARM      AGE stats_t_‚Ä¶      method     method Welch Tw‚Ä¶ ## 10    ARM      AGE stats_t_‚Ä¶ alternative  alternat‚Ä¶ two.sided ## 11    ARM      AGE stats_t_‚Ä¶          mu    H0 Mean         0 ## 12    ARM      AGE stats_t_‚Ä¶      paired  Paired t‚Ä¶     FALSE ## 13    ARM      AGE stats_t_‚Ä¶   var.equal  Equal Va‚Ä¶     FALSE ## 14    ARM      AGE stats_t_‚Ä¶  conf.level  CI Confi‚Ä¶      0.95  ## ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/index.html","id":"model-input","dir":"","previous_headings":"Examples","what":"Model Input","title":"Extra Analysis Results Data Utilities","text":"{cardx} functions accept regression model objects input: Note Analysis Results Standard begin data set rather model object. accomplish include model construction helpers.","code":"lm(AGE ~ ARM, data = cards::ADSL) |>   ard_aod_wald_test() construct_model(   data = cards::ADSL,   formula = reformulate2(\"ARM\", response = \"AGE\"),   method = \"lm\" ) |>   ard_aod_wald_test() ## {cards} data frame: 6 x 8  ##      variable   context stat_name stat_label     stat fmt_fun ## 1 (Intercept) aod_wald‚Ä¶        df  Degrees ‚Ä¶        1       1 ## 2 (Intercept) aod_wald‚Ä¶ statistic  Statistic 7126.713       1 ## 3 (Intercept) aod_wald‚Ä¶   p.value    p-value        0       1 ## 4         ARM aod_wald‚Ä¶        df  Degrees ‚Ä¶        2       1 ## 5         ARM aod_wald‚Ä¶ statistic  Statistic    1.046       1 ## 6         ARM aod_wald‚Ä¶   p.value    p-value    0.593       1  ## ‚Ñπ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cardx/index.html","id":"additional-resources","dir":"","previous_headings":"","what":"Additional Resources","title":"Extra Analysis Results Data Utilities","text":"best resources help documents accompanying {cardx} function. Supporting documentation companion packages {cards} {gtsummary} useful understanding ARD workflow capabilities.","code":""},{"path":"https://insightsengineering.github.io/cardx/index.html","id":"cardx--renv","dir":"","previous_headings":"","what":"{cardx} + {renv}","title":"Extra Analysis Results Data Utilities","text":"{cardx} package exports functions create ARDs based various statistical methods; methods primarily implemented packages. {cardx} take hard dependency packages, meaning packages typically installed {cardx} installed CRAN. result, {renv} record packages lock.file unless direct reference underlying statistical package code. example, pass regression model ard_emmeans_mean_difference(), direct reference {emmeans} package script {renv} record package. One can circumvent issue including kind reference package code. couple common ways . Attaching package library() great simplicity, may want attach package ‚Äôs necessary. can invisibly print function package. Printing function effect environment (great), somewhat difficult read. (preferred method.)","code":"library(emmeans) invisible(emmeans::emmeans)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_aod_wald_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Wald Test ‚Äî ard_aod_wald_test","title":"ARD Wald Test ‚Äî ard_aod_wald_test","text":"Function takes regression model object calculates Wald statistical test using aod::wald.test().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_aod_wald_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Wald Test ‚Äî ard_aod_wald_test","text":"","code":"ard_aod_wald_test(   x,   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_aod_wald_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Wald Test ‚Äî ard_aod_wald_test","text":"x regression model object tidy_fun (function) tidier. Default broom.helpers::tidy_with_broom_or_parameters ... arguments passed aod::wald.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_aod_wald_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Wald Test ‚Äî ard_aod_wald_test","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_aod_wald_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Wald Test ‚Äî ard_aod_wald_test","text":"","code":"lm(AGE ~ ARM, data = cards::ADSL) |>   ard_aod_wald_test() #> {cards} data frame: 6 x 8 #>      variable   context stat_name stat_label     stat fmt_fun #> 1 (Intercept) aod_wald‚Ä¶        df  Degrees ‚Ä¶        1       1 #> 2 (Intercept) aod_wald‚Ä¶ statistic  Statistic 7126.713       1 #> 3 (Intercept) aod_wald‚Ä¶   p.value    p-value        0       1 #> 4         ARM aod_wald‚Ä¶        df  Degrees ‚Ä¶        2       1 #> 5         ARM aod_wald‚Ä¶ statistic  Statistic    1.046       1 #> 6         ARM aod_wald‚Ä¶   p.value    p-value    0.593       1 #> ‚Ñπ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Attributes ‚Äî ard_attributes.survey.design","title":"ARD Attributes ‚Äî ard_attributes.survey.design","text":"Add variable attributes ARD data frame. label attribute added columns, label specified label set column using label= argument, column name placed label statistic. class attribute also returned columns. attribute returned attributes() also added, e.g. factor levels.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Attributes ‚Äî ard_attributes.survey.design","text":"","code":"# S3 method for class 'survey.design' ard_attributes(data, variables = everything(), label = NULL, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Attributes ‚Äî ard_attributes.survey.design","text":"data (survey.design) design object often created survey::svydesign(). variables (tidy-select) variables include label (named list) named list variable labels, e.g. list(cyl = \". Cylinders\"). Default NULL ... dots future extensions must empty.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Attributes ‚Äî ard_attributes.survey.design","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Attributes ‚Äî ard_attributes.survey.design","text":"","code":"data(api, package = \"survey\") dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)  ard_attributes(   data = dclus1,   variables = c(sname, dname),   label = list(sname = \"School Name\", dname = \"District Name\") ) #> {cards} data frame: 4 x 8 #>   variable   context stat_name stat_label      stat fmt_fun #> 1    sname attribut‚Ä¶     label  Variable‚Ä¶ School N‚Ä¶    <fn> #> 2    sname attribut‚Ä¶     class  Variable‚Ä¶ character    NULL #> 3    dname attribut‚Ä¶     label  Variable‚Ä¶ District‚Ä¶    <fn> #> 4    dname attribut‚Ä¶     class  Variable‚Ä¶ character    NULL #> ‚Ñπ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD ANOVA from car Package ‚Äî ard_car_anova","title":"ARD ANOVA from car Package ‚Äî ard_car_anova","text":"Function takes regression model object calculated ANOVA using car::Anova().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD ANOVA from car Package ‚Äî ard_car_anova","text":"","code":"ard_car_anova(x, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD ANOVA from car Package ‚Äî ard_car_anova","text":"x regression model object ... arguments passed car::Anova(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD ANOVA from car Package ‚Äî ard_car_anova","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD ANOVA from car Package ‚Äî ard_car_anova","text":"","code":"lm(AGE ~ ARM, data = cards::ADSL) |>   ard_car_anova() #> {cards} data frame: 5 x 8 #>   variable   context stat_name stat_label   stat fmt_fun #> 1      ARM car_anova     sumsq      sumsq 71.386       1 #> 2      ARM car_anova        df  Degrees ‚Ä¶      2       1 #> 3      ARM car_anova    meansq     meansq 35.693       1 #> 4      ARM car_anova statistic  Statistic  0.523       1 #> 5      ARM car_anova   p.value    p-value  0.593       1 #> ‚Ñπ 2 more variables: warning, error  glm(vs ~ factor(cyl) + factor(am), data = mtcars, family = binomial) |>   ard_car_anova(test.statistic = \"Wald\") #> {cards} data frame: 6 x 8 #>      variable   context stat_name stat_label  stat   warning #> 1 factor(cyl) car_anova statistic  Statistic     0 glm.fit:‚Ä¶ #> 2 factor(cyl) car_anova        df  Degrees ‚Ä¶     2 glm.fit:‚Ä¶ #> 3 factor(cyl) car_anova   p.value    p-value     1 glm.fit:‚Ä¶ #> 4  factor(am) car_anova statistic  Statistic     0 glm.fit:‚Ä¶ #> 5  factor(am) car_anova        df  Degrees ‚Ä¶     1 glm.fit:‚Ä¶ #> 6  factor(am) car_anova   p.value    p-value 0.998 glm.fit:‚Ä¶ #> ‚Ñπ 2 more variables: fmt_fun, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_vif.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression VIF ARD ‚Äî ard_car_vif","title":"Regression VIF ARD ‚Äî ard_car_vif","text":"Function takes regression model object returns variance inflation factor (VIF) using car::vif() converts ARD structure","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_vif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression VIF ARD ‚Äî ard_car_vif","text":"","code":"ard_car_vif(x, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_vif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression VIF ARD ‚Äî ard_car_vif","text":"x regression model object See car::vif() details ... arguments passed car::vif(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_vif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression VIF ARD ‚Äî ard_car_vif","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_car_vif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression VIF ARD ‚Äî ard_car_vif","text":"","code":"lm(AGE ~ ARM + SEX, data = cards::ADSL) |>   ard_car_vif() #> {cards} data frame: 6 x 8 #>   variable context stat_name stat_label  stat fmt_fun #> 1      ARM car_vif      GVIF       GVIF 1.016       1 #> 2      ARM car_vif        df         df     2       1 #> 3      ARM car_vif     aGVIF  Adjusted‚Ä¶ 1.004       1 #> 4      SEX car_vif      GVIF       GVIF 1.016       1 #> 5      SEX car_vif        df         df     1       1 #> 6      SEX car_vif     aGVIF  Adjusted‚Ä¶ 1.008       1 #> ‚Ñπ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical.survey.design.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Categorical Survey Statistics ‚Äî ard_categorical.survey.design","title":"ARD Categorical Survey Statistics ‚Äî ard_categorical.survey.design","text":"Compute tabulations survey-weighted data. counts proportion (\"N\", \"n\", \"p\") calculated using survey::svytable(), standard errors design effect (\"p.std.error\", \"deff\") calculated using survey::svymean(). design effect (\"deff\") calculated requested statistic argument. unweighted statistics calculated cards::ard_categorical.data.frame().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical.survey.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Categorical Survey Statistics ‚Äî ard_categorical.survey.design","text":"","code":"# S3 method for class 'survey.design' ard_categorical(   data,   variables,   by = NULL,   statistic = everything() ~ c(\"n\", \"N\", \"p\", \"p.std.error\", \"n_unweighted\",     \"N_unweighted\", \"p_unweighted\"),   denominator = c(\"column\", \"row\", \"cell\"),   fmt_fun = NULL,   stat_label = everything() ~ list(p = \"%\", p.std.error = \"SE(%)\", deff =     \"Design Effect\", n_unweighted = \"Unweighted n\", N_unweighted = \"Unweighted N\",     p_unweighted = \"Unweighted %\"),   fmt_fn = deprecated(),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical.survey.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Categorical Survey Statistics ‚Äî ard_categorical.survey.design","text":"data (survey.design) design object often created survey::svydesign(). variables (tidy-select) columns include summaries. (tidy-select) results calculated combinations column specified variables. single column may specified. statistic (formula-list-selector) named list, list formulas, single formula list element character vector statistic names include. See default value options. denominator (string) string indicating type proportions calculate. Must one \"column\" (default), \"row\", \"cell\". fmt_fun (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(mean = \"Mean\", sd = \"SD\") everything() ~ list(mean ~ \"Mean\", sd ~ \"SD\"). fmt_fn  ... dots future extensions must empty.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical.survey.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Categorical Survey Statistics ‚Äî ard_categorical.survey.design","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical.survey.design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Categorical Survey Statistics ‚Äî ard_categorical.survey.design","text":"","code":"svy_titanic <- survey::svydesign(~1, data = as.data.frame(Titanic), weights = ~Freq)  ard_categorical(svy_titanic, variables = c(Class, Age), by = Survived) #> {cards} data frame: 84 x 11 #>      group1 group1_level variable variable_level   stat_name stat_label  stat #> 1  Survived           No    Class            1st           n          n   122 #> 2  Survived           No    Class            1st           N          N  1490 #> 3  Survived           No    Class            1st           p          % 0.082 #> 4  Survived           No    Class            1st p.std.error      SE(%) 0.086 #> 5  Survived           No    Class            2nd           n          n   167 #> 6  Survived           No    Class            2nd           N          N  1490 #> 7  Survived           No    Class            2nd           p          % 0.112 #> 8  Survived           No    Class            2nd p.std.error      SE(%) 0.111 #> 9  Survived           No    Class            3rd           n          n   528 #> 10 Survived           No    Class            3rd           N          N  1490 #> ‚Ñπ 74 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_abnormal.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Abnormality Counts ‚Äî ard_categorical_abnormal","title":"ARD Abnormality Counts ‚Äî ard_categorical_abnormal","text":"Function counts participants abnormal analysis range values. abnormality specified via abnormal parameter (e.g. Low High), statistic n calculated number patients abnormality recorded, statistic N calculated total number patients least one post-baseline assessment. p calculated n / N. excl_baseline_abn=TRUE participants abnormality baseline excluded statistic calculations.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_abnormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Abnormality Counts ‚Äî ard_categorical_abnormal","text":"","code":"ard_categorical_abnormal(   data,   postbaseline,   baseline,   id = NULL,   by = NULL,   strata = NULL,   abnormal = list(Low = \"LOW\", High = \"HIGH\"),   excl_baseline_abn = TRUE,   quiet = FALSE )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_abnormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Abnormality Counts ‚Äî ard_categorical_abnormal","text":"data (data.frame) data frame. postbaseline (tidy-select) column name post-baseline reference range indicator variable. baseline (tidy-select) column name baseline reference range indicator variable. id (tidy-select) column name used identify unique participants data. NULL, row data assumed correspond unique participants. , strata (tidy-select) columns tabulate /stratify summary statistic calculation. Arguments similar, important distinction: : results calculated combinations columns specified, including unobserved combinations unobserved factor levels. strata: results calculated observed combinations columns specified. Arguments may used conjunction one another. abnormal (list) named list abnormalities assess . element specify levels postbaseline/baseline included assessing given abnormality, name specifying name abnormality. levels specified present data ignored. excl_baseline_abn (logical) whether participants baseline abnormality excluded calculations. Defaults TRUE. quiet (scalar logical) logical indicating whether suppress additional messaging. Default FALSE.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_abnormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Abnormality Counts ‚Äî ard_categorical_abnormal","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_abnormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Abnormality Counts ‚Äî ard_categorical_abnormal","text":"","code":"# Load Data ------------------- set.seed(1) adlb <- cards::ADLB adlb$BNRIND <- ifelse(   adlb$BNRIND != \"N\", sample(c(\"LOW\", \"LOW LOW\", \"HIGH\", \"HIGH HIGH\"), nrow(adlb), replace = TRUE), \"NORMAL\" )  # Example 1 ------------------- adlb |>   ard_categorical_abnormal(     postbaseline = LBNRIND, baseline = BNRIND, id = USUBJID, by = TRTA,     abnormal = list(Low = c(\"LOW\", \"LOW LOW\"), High = c(\"HIGH\", \"HIGH HIGH\"))   ) #> Abnormality \"Low\" created by merging levels: \"LOW\", \"LOW LOW\" #> Abnormality \"High\" created by merging levels: \"HIGH\", \"HIGH HIGH\" #> {cards} data frame: 18 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1    TRTA      Placebo  LBNRIND            Low         n          n     2 #> 2    TRTA      Placebo  LBNRIND            Low         N          N     7 #> 3    TRTA      Placebo  LBNRIND            Low         p          % 0.286 #> 4    TRTA      Placebo  LBNRIND           High         n          n     3 #> 5    TRTA      Placebo  LBNRIND           High         N          N     7 #> 6    TRTA      Placebo  LBNRIND           High         p          % 0.429 #> 7    TRTA    Xanomeli‚Ä¶  LBNRIND            Low         n          n     4 #> 8    TRTA    Xanomeli‚Ä¶  LBNRIND            Low         N          N     7 #> 9    TRTA    Xanomeli‚Ä¶  LBNRIND            Low         p          % 0.571 #> 10   TRTA    Xanomeli‚Ä¶  LBNRIND           High         n          n     3 #> 11   TRTA    Xanomeli‚Ä¶  LBNRIND           High         N          N     7 #> 12   TRTA    Xanomeli‚Ä¶  LBNRIND           High         p          % 0.429 #> 13   TRTA    Xanomeli‚Ä¶  LBNRIND            Low         n          n     4 #> 14   TRTA    Xanomeli‚Ä¶  LBNRIND            Low         N          N     6 #> 15   TRTA    Xanomeli‚Ä¶  LBNRIND            Low         p          % 0.667 #> 16   TRTA    Xanomeli‚Ä¶  LBNRIND           High         n          n     3 #> 17   TRTA    Xanomeli‚Ä¶  LBNRIND           High         N          N     6 #> 18   TRTA    Xanomeli‚Ä¶  LBNRIND           High         p          %   0.5 #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Proportion Confidence Intervals ‚Äî ard_categorical_ci","title":"ARD Proportion Confidence Intervals ‚Äî ard_categorical_ci","text":"Calculate confidence intervals proportions.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Proportion Confidence Intervals ‚Äî ard_categorical_ci","text":"","code":"ard_categorical_ci(data, ...)  # S3 method for class 'data.frame' ard_categorical_ci(   data,   variables,   by = dplyr::group_vars(data),   method = c(\"waldcc\", \"wald\", \"clopper-pearson\", \"wilson\", \"wilsoncc\", \"strat_wilson\",     \"strat_wilsoncc\", \"agresti-coull\", \"jeffreys\"),   denominator = c(\"column\", \"row\", \"cell\"),   conf.level = 0.95,   value = list(where(is_binary) ~ 1L, where(is.logical) ~ TRUE),   strata = NULL,   weights = NULL,   max.iterations = 10,   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Proportion Confidence Intervals ‚Äî ard_categorical_ci","text":"data (data.frame) data frame ... Arguments passed methods. variables (tidy-select) columns include summaries. Columns must class <logical> <numeric> values coded c(0,1). (tidy-select) columns stratify calculations . method (string) string indicating type confidence interval calculate. Must one . See ?proportion_ci details. denominator (string) Must one 'column' (default), 'row', 'cell', specifies direction calculation/denominator. Argument similar cards::ard_categorical(denominator). conf.level (scalar numeric) scalar (0,1) indicating confidence level. Default 0.95 value (formula-list-selector) function calculate CIs levels variables specified. Use argument instead request single level summarized. Default list((is_binary) ~ 1L, (.logical) ~ TRUE), columns coded 0/1 TRUE/FALSE summarize 1 TRUE levels. strata, weights, max.iterations arguments passed proportion_ci_strat_wilson(), method='strat_wilson'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Proportion Confidence Intervals ‚Äî ard_categorical_ci","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Proportion Confidence Intervals ‚Äî ard_categorical_ci","text":"","code":"# compute CI for binary variables ard_categorical_ci(mtcars, variables = c(vs, am), method = \"wilson\") #> {cards} data frame: 22 x 9 #>    variable variable_level   context  stat_name stat_label      stat #> 1        vs              1 proporti‚Ä¶          N          N        32 #> 2        vs              1 proporti‚Ä¶          n          n        14 #> 3        vs              1 proporti‚Ä¶ conf.level  conf.lev‚Ä¶      0.95 #> 4        vs              1 proporti‚Ä¶   estimate   estimate     0.438 #> 5        vs              1 proporti‚Ä¶  statistic  statistic       0.5 #> 6        vs              1 proporti‚Ä¶    p.value    p.value      0.48 #> 7        vs              1 proporti‚Ä¶  parameter  parameter         1 #> 8        vs              1 proporti‚Ä¶   conf.low   conf.low     0.282 #> 9        vs              1 proporti‚Ä¶  conf.high  conf.high     0.607 #> 10       vs              1 proporti‚Ä¶     method     method Wilson C‚Ä¶ #> ‚Ñπ 12 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 3 more variables: fmt_fun, warning, error  # compute CIs for each level of a categorical variable ard_categorical_ci(mtcars, variables = cyl, method = \"jeffreys\") #> {cards} data frame: 21 x 9 #>    variable variable_level   context  stat_name stat_label      stat #> 1       cyl              4 proporti‚Ä¶          N          N        32 #> 2       cyl              4 proporti‚Ä¶          n          n        11 #> 3       cyl              4 proporti‚Ä¶   estimate   estimate     0.344 #> 4       cyl              4 proporti‚Ä¶   conf.low   conf.low     0.198 #> 5       cyl              4 proporti‚Ä¶  conf.high  conf.high     0.516 #> 6       cyl              4 proporti‚Ä¶ conf.level  conf.lev‚Ä¶      0.95 #> 7       cyl              4 proporti‚Ä¶     method     method Jeffreys‚Ä¶ #> 8       cyl              6 proporti‚Ä¶          N          N        32 #> 9       cyl              6 proporti‚Ä¶          n          n         7 #> 10      cyl              6 proporti‚Ä¶   estimate   estimate     0.219 #> ‚Ñπ 11 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.survey.design.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD survey categorical CIs ‚Äî ard_categorical_ci.survey.design","title":"ARD survey categorical CIs ‚Äî ard_categorical_ci.survey.design","text":"Confidence intervals categorical variables calculated via survey::svyciprop().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.survey.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD survey categorical CIs ‚Äî ard_categorical_ci.survey.design","text":"","code":"# S3 method for class 'survey.design' ard_categorical_ci(   data,   variables,   by = NULL,   method = c(\"logit\", \"likelihood\", \"asin\", \"beta\", \"mean\", \"xlogit\"),   conf.level = 0.95,   value = list(where(is_binary) ~ 1L, where(is.logical) ~ TRUE),   df = survey::degf(data),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.survey.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD survey categorical CIs ‚Äî ard_categorical_ci.survey.design","text":"data (survey.design) design object often created survey::svydesign(). variables (tidy-select) columns include summaries. (tidy-select) results calculated combinations columns specified, including unobserved combinations unobserved factor levels. method (string) Method passed survey::svyciprop(method) conf.level (scalar numeric) scalar (0,1) indicating confidence level. Default 0.95 value (formula-list-selector) function calculate CIs levels variables specified. Use argument instead request single level summarized. Default list((is_binary) ~ 1L, (.logical) ~ TRUE), columns coded 0/1 TRUE/FALSE summarize 1 TRUE levels. df (numeric) denominator degrees freedom, passed survey::svyciprop(df). Default survey::degf(data). ... arguments passed survey::svyciprop()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.survey.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD survey categorical CIs ‚Äî ard_categorical_ci.survey.design","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_ci.survey.design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD survey categorical CIs ‚Äî ard_categorical_ci.survey.design","text":"","code":"data(api, package = \"survey\") dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)  ard_categorical_ci(dclus1, variables = sch.wide) #> {cards} data frame: 10 x 9 #>    variable variable_level   context  stat_name stat_label  stat #> 1  sch.wide             No categori‚Ä¶   estimate   estimate 0.126 #> 2  sch.wide             No categori‚Ä¶   conf.low   conf.low 0.088 #> 3  sch.wide             No categori‚Ä¶  conf.high  conf.high 0.176 #> 4  sch.wide             No categori‚Ä¶     method     method logit #> 5  sch.wide             No categori‚Ä¶ conf.level  conf.lev‚Ä¶  0.95 #> 6  sch.wide            Yes categori‚Ä¶   estimate   estimate 0.874 #> 7  sch.wide            Yes categori‚Ä¶   conf.low   conf.low 0.824 #> 8  sch.wide            Yes categori‚Ä¶  conf.high  conf.high 0.912 #> 9  sch.wide            Yes categori‚Ä¶     method     method logit #> 10 sch.wide            Yes categori‚Ä¶ conf.level  conf.lev‚Ä¶  0.95 #> ‚Ñπ 3 more variables: fmt_fun, warning, error ard_categorical_ci(dclus1, variables = sch.wide, value = sch.wide ~ \"Yes\", method = \"xlogit\") #> {cards} data frame: 5 x 9 #>   variable variable_level   context  stat_name stat_label   stat #> 1 sch.wide            Yes categori‚Ä¶   estimate   estimate  0.874 #> 2 sch.wide            Yes categori‚Ä¶   conf.low   conf.low  0.824 #> 3 sch.wide            Yes categori‚Ä¶  conf.high  conf.high  0.912 #> 4 sch.wide            Yes categori‚Ä¶     method     method xlogit #> 5 sch.wide            Yes categori‚Ä¶ conf.level  conf.lev‚Ä¶   0.95 #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_max.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD to Calculate Categorical Occurrence Rates by Maximum Level Per Unique ID ‚Äî ard_categorical_max","title":"ARD to Calculate Categorical Occurrence Rates by Maximum Level Per Unique ID ‚Äî ard_categorical_max","text":"Function calculates categorical variable level occurrences rates maximum level per unique ID. variable variables evaluated independently results variables stacked. highest-ordered level counted unique ID. Unordered, non-numeric variables converted factor default level order used ordering.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD to Calculate Categorical Occurrence Rates by Maximum Level Per Unique ID ‚Äî ard_categorical_max","text":"","code":"ard_categorical_max(   data,   variables,   id,   by = dplyr::group_vars(data),   statistic = everything() ~ c(\"n\", \"p\", \"N\"),   denominator = NULL,   strata = NULL,   fmt_fun = NULL,   stat_label = everything() ~ cards::default_stat_labels(),   quiet = FALSE,   fmt_fn = deprecated(),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD to Calculate Categorical Occurrence Rates by Maximum Level Per Unique ID ‚Äî ard_categorical_max","text":"data (data.frame) data frame variables (tidy-select) categorical variables occurrence rates per unique ID (maximum level) calculated. id (tidy-select) Argument used subset data identify rows data calculate categorical variable level occurrence rates. , strata (tidy-select) columns use grouping stratifying table output. Arguments similar, important distinction: : results tabulated combinations columns specified, including unobserved combinations unobserved factor levels. strata: results tabulated observed combinations columns specified. Arguments may used conjunction one another. statistic (formula-list-selector) named list, list formulas, single formula list element one  c(\"n\", \"N\", \"p\", \"n_cum\", \"p_cum\") (RHS formula). denominator (data.frame, integer) optional argument change denominator used \"N\" \"p\" statistic calculations. Defaults NULL, case dplyr::distinct(data, dplyr::pick(all_of(c(id, )))) used calculations. See cards::ard_categorical() details specifying denominators. fmt_fun (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(n = \"n\", p = \"pct\") everything() ~ list(n ~ \"n\", p ~ \"pct\"). quiet (scalar logical) Logical indicating whether suppress additional messaging. Default FALSE. fmt_fn  ... Arguments passed methods.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD to Calculate Categorical Occurrence Rates by Maximum Level Per Unique ID ‚Äî ard_categorical_max","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_categorical_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD to Calculate Categorical Occurrence Rates by Maximum Level Per Unique ID ‚Äî ard_categorical_max","text":"","code":"# Occurrence Rates by Max Level (Highest Severity) -------------------------- ard_categorical_max(   cards::ADAE,   variables = c(AESER, AESEV),   id = USUBJID,   by = TRTA,   denominator = cards::ADSL ) #> `AESER`: \"N\" < \"Y\" #> `AESEV`: \"MILD\" < \"MODERATE\" < \"SEVERE\" #> {cards} data frame: 45 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1    TRTA      Placebo    AESER              N         n          n    69 #> 2    TRTA      Placebo    AESER              N         N          N    86 #> 3    TRTA      Placebo    AESER              N         p          % 0.802 #> 4    TRTA      Placebo    AESER              Y         n          n     0 #> 5    TRTA      Placebo    AESER              Y         N          N    86 #> 6    TRTA      Placebo    AESER              Y         p          %     0 #> 7    TRTA      Placebo    AESEV           MILD         n          n    36 #> 8    TRTA      Placebo    AESEV           MILD         N          N    86 #> 9    TRTA      Placebo    AESEV           MILD         p          % 0.419 #> 10   TRTA      Placebo    AESEV       MODERATE         n          n    26 #> ‚Ñπ 35 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous.survey.design.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Continuous Survey Statistics ‚Äî ard_continuous.survey.design","title":"ARD Continuous Survey Statistics ‚Äî ard_continuous.survey.design","text":"Returns ARD weighted statistics using {survey} package.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous.survey.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Continuous Survey Statistics ‚Äî ard_continuous.survey.design","text":"","code":"# S3 method for class 'survey.design' ard_continuous(   data,   variables,   by = NULL,   statistic = everything() ~ c(\"median\", \"p25\", \"p75\"),   fmt_fun = NULL,   stat_label = NULL,   fmt_fn = deprecated(),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous.survey.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Continuous Survey Statistics ‚Äî ard_continuous.survey.design","text":"data (survey.design) design object often created survey::svydesign(). variables (tidy-select) columns include summaries. (tidy-select) results calculated combinations columns specified, including unobserved combinations unobserved factor levels. statistic (formula-list-selector) named list, list formulas, single formula list element character vector statistic names include. See options. fmt_fun (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character)). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(mean = \"Mean\", sd = \"SD\") everything() ~ list(mean ~ \"Mean\", sd ~ \"SD\"). fmt_fn  ... dots future extensions must empty.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous.survey.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Continuous Survey Statistics ‚Äî ard_continuous.survey.design","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous.survey.design.html","id":"statistic-argument","dir":"Reference","previous_headings":"","what":"statistic argument","title":"ARD Continuous Survey Statistics ‚Äî ard_continuous.survey.design","text":"following statistics available: 'mean', 'median', 'min', 'max', 'sum', 'var', 'sd', 'mean.std.error', 'deff', 'p##', 'p##' percentiles ## integer 0 100. design effect (\"deff\") calculated requested statistic argument.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous.survey.design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Continuous Survey Statistics ‚Äî ard_continuous.survey.design","text":"","code":"data(api, package = \"survey\") dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)  ard_continuous(   data = dclus1,   variables = api00,   by = stype ) #> {cards} data frame: 9 x 10 #>   group1 group1_level variable stat_name stat_label stat #> 1  stype            E    api00    median     Median  652 #> 2  stype            H    api00    median     Median  608 #> 3  stype            M    api00    median     Median  642 #> 4  stype            E    api00       p25  25% Perc‚Ä¶  553 #> 5  stype            H    api00       p25  25% Perc‚Ä¶  529 #> 6  stype            M    api00       p25  25% Perc‚Ä¶  547 #> 7  stype            E    api00       p75  75% Perc‚Ä¶  729 #> 8  stype            H    api00       p75  75% Perc‚Ä¶  703 #> 9  stype            M    api00       p75  75% Perc‚Ä¶  699 #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD continuous CIs ‚Äî ard_continuous_ci","title":"ARD continuous CIs ‚Äî ard_continuous_ci","text":"One-sample confidence intervals continuous variable means medians.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD continuous CIs ‚Äî ard_continuous_ci","text":"","code":"ard_continuous_ci(data, ...)  # S3 method for class 'data.frame' ard_continuous_ci(   data,   variables,   by = dplyr::group_vars(data),   conf.level = 0.95,   method = c(\"t.test\", \"wilcox.test\"),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD continuous CIs ‚Äî ard_continuous_ci","text":"data (data.frame) data frame. See details. ... arguments passed t.test() wilcox.test() variables (tidy-select) column names compared. Independent t-tests computed variable. (tidy-select) optional column name compare . conf.level (scalar numeric) confidence level confidence interval. Default 0.95. method (string) string indicating method use confidence interval calculation. Must one \"t.test\" \"wilcox.test\"","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD continuous CIs ‚Äî ard_continuous_ci","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD continuous CIs ‚Äî ard_continuous_ci","text":"","code":"ard_continuous_ci(mtcars, variables = c(mpg, hp), method = \"wilcox.test\") #> {cards} data frame: 24 x 8 #>    variable   context   stat_name stat_label      stat   warning #> 1       mpg continuo‚Ä¶    estimate       Mean      19.6 cannot c‚Ä¶ #> 2       mpg continuo‚Ä¶   statistic  t Statis‚Ä¶       528 cannot c‚Ä¶ #> 3       mpg continuo‚Ä¶     p.value    p-value         0 cannot c‚Ä¶ #> 4       mpg continuo‚Ä¶    conf.low  CI Lower‚Ä¶      17.5 cannot c‚Ä¶ #> 5       mpg continuo‚Ä¶   conf.high  CI Upper‚Ä¶      22.1 cannot c‚Ä¶ #> 6       mpg continuo‚Ä¶      method     method Wilcoxon‚Ä¶ cannot c‚Ä¶ #> 7       mpg continuo‚Ä¶ alternative  alternat‚Ä¶ two.sided cannot c‚Ä¶ #> 8        hp continuo‚Ä¶    estimate       Mean     142.5 cannot c‚Ä¶ #> 9        hp continuo‚Ä¶   statistic  t Statis‚Ä¶       528 cannot c‚Ä¶ #> 10       hp continuo‚Ä¶     p.value    p-value         0 cannot c‚Ä¶ #> ‚Ñπ 14 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 2 more variables: fmt_fun, error ard_continuous_ci(mtcars, variables = mpg, by = am, method = \"t.test\") #> {cards} data frame: 20 x 10 #>    group1 group1_level variable   stat_name stat_label      stat #> 1      am            0      mpg    estimate       Mean    17.147 #> 2      am            0      mpg   statistic  t Statis‚Ä¶    19.495 #> 3      am            0      mpg     p.value    p-value         0 #> 4      am            0      mpg   parameter  Degrees ‚Ä¶        18 #> 5      am            0      mpg    conf.low  CI Lower‚Ä¶    15.299 #> 6      am            0      mpg   conf.high  CI Upper‚Ä¶    18.995 #> 7      am            0      mpg      method     method One Samp‚Ä¶ #> 8      am            0      mpg alternative  alternat‚Ä¶ two.sided #> 9      am            0      mpg          mu    H0 Mean         0 #> 10     am            0      mpg  conf.level  CI Confi‚Ä¶      0.95 #> 11     am            1      mpg    estimate       Mean    24.392 #> 12     am            1      mpg   statistic  t Statis‚Ä¶    14.262 #> 13     am            1      mpg     p.value    p-value         0 #> 14     am            1      mpg   parameter  Degrees ‚Ä¶        12 #> 15     am            1      mpg    conf.low  CI Lower‚Ä¶    20.666 #> 16     am            1      mpg   conf.high  CI Upper‚Ä¶    28.119 #> 17     am            1      mpg      method     method One Samp‚Ä¶ #> 18     am            1      mpg alternative  alternat‚Ä¶ two.sided #> 19     am            1      mpg          mu    H0 Mean         0 #> 20     am            1      mpg  conf.level  CI Confi‚Ä¶      0.95 #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.survey.design.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD survey continuous CIs ‚Äî ard_continuous_ci.survey.design","title":"ARD survey continuous CIs ‚Äî ard_continuous_ci.survey.design","text":"One-sample confidence intervals continuous variables' means medians. Confidence limits calculated survey::svymean() survey::svyquantile().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.survey.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD survey continuous CIs ‚Äî ard_continuous_ci.survey.design","text":"","code":"# S3 method for class 'survey.design' ard_continuous_ci(   data,   variables,   by = NULL,   method = c(\"svymean\", \"svymedian.mean\", \"svymedian.beta\", \"svymedian.xlogit\",     \"svymedian.asin\", \"svymedian.score\"),   conf.level = 0.95,   df = survey::degf(data),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.survey.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD survey continuous CIs ‚Äî ard_continuous_ci.survey.design","text":"data (survey.design) design object often created survey::svydesign(). variables (tidy-select) columns include summaries. (tidy-select) results calculated combinations columns specified, including unobserved combinations unobserved factor levels. method (string) Method confidence interval calculation. \"svymean\", calculation computed via survey::svymean(). Otherwise, calculated viasurvey::svyquantile(interval.type=method) conf.level (scalar numeric) confidence level confidence interval. Default 0.95. df (numeric) denominator degrees freedom, passed survey::confint(df). Default survey::degf(data). ... arguments passed survey::confint()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.survey.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD survey continuous CIs ‚Äî ard_continuous_ci.survey.design","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_continuous_ci.survey.design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD survey continuous CIs ‚Äî ard_continuous_ci.survey.design","text":"","code":"data(api, package = \"survey\") dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)  ard_continuous_ci(dclus1, variables = api00) #> {cards} data frame: 5 x 8 #>   variable   context  stat_name stat_label    stat fmt_fun #> 1    api00 survey_c‚Ä¶   estimate   estimate 644.169       2 #> 2    api00 survey_c‚Ä¶  std.error  std.error  23.542       2 #> 3    api00 survey_c‚Ä¶   conf.low   conf.low 593.676       2 #> 4    api00 survey_c‚Ä¶  conf.high  conf.high 694.662       2 #> 5    api00 survey_c‚Ä¶ conf.level  conf.lev‚Ä¶    0.95       2 #> ‚Ñπ 2 more variables: warning, error ard_continuous_ci(dclus1, variables = api00, method = \"svymedian.xlogit\") #> {cards} data frame: 5 x 8 #>   variable   context  stat_name stat_label   stat fmt_fun #> 1    api00 survey_c‚Ä¶   estimate   estimate    652       2 #> 2    api00 survey_c‚Ä¶  std.error  std.error 34.969       2 #> 3    api00 survey_c‚Ä¶   conf.low   conf.low    564       2 #> 4    api00 survey_c‚Ä¶  conf.high  conf.high    714       2 #> 5    api00 survey_c‚Ä¶ conf.level  conf.lev‚Ä¶   0.95       2 #> ‚Ñπ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_dichotomous.survey.design.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Dichotomous Survey Statistics ‚Äî ard_dichotomous.survey.design","title":"ARD Dichotomous Survey Statistics ‚Äî ard_dichotomous.survey.design","text":"Compute Analysis Results Data (ARD) dichotomous summary statistics.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_dichotomous.survey.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Dichotomous Survey Statistics ‚Äî ard_dichotomous.survey.design","text":"","code":"# S3 method for class 'survey.design' ard_dichotomous(   data,   variables,   by = NULL,   value = cards::maximum_variable_value(data$variables[variables]),   statistic = everything() ~ c(\"n\", \"N\", \"p\", \"p.std.error\", \"n_unweighted\",     \"N_unweighted\", \"p_unweighted\"),   denominator = c(\"column\", \"row\", \"cell\"),   fmt_fun = NULL,   stat_label = everything() ~ list(p = \"%\", p.std.error = \"SE(%)\", deff =     \"Design Effect\", n_unweighted = \"Unweighted n\", N_unweighted = \"Unweighted N\",     p_unweighted = \"Unweighted %\"),   fmt_fn = deprecated(),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_dichotomous.survey.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Dichotomous Survey Statistics ‚Äî ard_dichotomous.survey.design","text":"data (survey.design) design object often created survey::svydesign(). variables (tidy-select) columns include summaries. (tidy-select) results calculated combinations column specified variables. single column may specified. value (named list) named list dichotomous values tabulate. Default cards::maximum_variable_value(data$variables), returns largest/last value sort. statistic (formula-list-selector) named list, list formulas, single formula list element character vector statistic names include. See default value options. denominator (string) string indicating type proportions calculate. Must one \"column\" (default), \"row\", \"cell\". fmt_fun (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(mean = \"Mean\", sd = \"SD\") everything() ~ list(mean ~ \"Mean\", sd ~ \"SD\"). fmt_fn  ... dots future extensions must empty.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_dichotomous.survey.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Dichotomous Survey Statistics ‚Äî ard_dichotomous.survey.design","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_dichotomous.survey.design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Dichotomous Survey Statistics ‚Äî ard_dichotomous.survey.design","text":"","code":"survey::svydesign(ids = ~1, data = mtcars, weights = ~1) |>   ard_dichotomous(by = vs, variables = c(cyl, am), value = list(cyl = 4)) #> {cards} data frame: 28 x 11 #>    group1 group1_level variable variable_level    stat_name stat_label  stat #> 1      vs            0      cyl              4            n          n     1 #> 2      vs            0      cyl              4            N          N    18 #> 3      vs            0      cyl              4            p          % 0.056 #> 4      vs            0      cyl              4  p.std.error      SE(%) 0.055 #> 5      vs            0       am              1            n          n     6 #> 6      vs            0       am              1            N          N    18 #> 7      vs            0       am              1            p          % 0.333 #> 8      vs            0       am              1  p.std.error      SE(%) 0.113 #> 9      vs            0      cyl              4 n_unweighted  Unweight‚Ä¶     1 #> 10     vs            0      cyl              4 N_unweighted  Unweight‚Ä¶    18 #> ‚Ñπ 18 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_cohens_d.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Cohen's D Test ‚Äî ard_effectsize_cohens_d","title":"ARD Cohen's D Test ‚Äî ard_effectsize_cohens_d","text":"Analysis results data paired non-paired Cohen's D Effect Size Test using effectsize::cohens_d().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_cohens_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Cohen's D Test ‚Äî ard_effectsize_cohens_d","text":"","code":"ard_effectsize_cohens_d(data, by, variables, conf.level = 0.95, ...)  ard_effectsize_paired_cohens_d(data, by, variables, id, conf.level = 0.95, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_cohens_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Cohen's D Test ‚Äî ard_effectsize_cohens_d","text":"data (data.frame) data frame. See details. (tidy-select) column name compare . Must categorical variable exactly two levels. variables (tidy-select) column names compared. Must continuous variables. Independent tests run variable. conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... arguments passed effectsize::cohens_d(...) id (tidy-select) column name subject participant ID","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_cohens_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Cohen's D Test ‚Äî ard_effectsize_cohens_d","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_cohens_d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD Cohen's D Test ‚Äî ard_effectsize_cohens_d","text":"ard_effectsize_cohens_d() function, data expected one row per subject. data passed effectsize::cohens_d(data[[variable]]~data[[]], data, paired = FALSE, ...). ard_effectsize_paired_cohens_d() function, data expected one row per subject per level. effect size calculated, data reshaped wide format one row per subject. data passed effectsize::cohens_d(x = data_wide[[<level 1>]], y = data_wide[[<level 2>]], paired = TRUE, ...).","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_cohens_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Cohen's D Test ‚Äî ard_effectsize_cohens_d","text":"","code":"cards::ADSL |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   ard_effectsize_cohens_d(by = ARM, variables = AGE) #> {cards} data frame: 9 x 9 #>   group1 variable   context   stat_name stat_label      stat #> 1    ARM      AGE effectsi‚Ä¶    estimate  Effect S‚Ä¶       0.1 #> 2    ARM      AGE effectsi‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> 3    ARM      AGE effectsi‚Ä¶    conf.low  CI Lower‚Ä¶    -0.201 #> 4    ARM      AGE effectsi‚Ä¶   conf.high  CI Upper‚Ä¶     0.401 #> 5    ARM      AGE effectsi‚Ä¶      method     method Cohen's D #> 6    ARM      AGE effectsi‚Ä¶          mu    H0 Mean         0 #> 7    ARM      AGE effectsi‚Ä¶      paired  Paired t‚Ä¶     FALSE #> 8    ARM      AGE effectsi‚Ä¶   pooled_sd  Pooled S‚Ä¶      TRUE #> 9    ARM      AGE effectsi‚Ä¶ alternative  Alternat‚Ä¶ two.sided #> ‚Ñπ 3 more variables: fmt_fun, warning, error  # constructing a paired data set, # where patients receive both treatments cards::ADSL[c(\"ARM\", \"AGE\")] |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>   dplyr::arrange(USUBJID, ARM) |>   dplyr::group_by(USUBJID) |>   dplyr::filter(dplyr::n() > 1) |>   ard_effectsize_paired_cohens_d(by = ARM, variables = AGE, id = USUBJID) #> {cards} data frame: 9 x 9 #>   group1 variable   context   stat_name stat_label      stat #> 1    ARM      AGE effectsi‚Ä¶    estimate  Effect S‚Ä¶     0.069 #> 2    ARM      AGE effectsi‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> 3    ARM      AGE effectsi‚Ä¶    conf.low  CI Lower‚Ä¶    -0.146 #> 4    ARM      AGE effectsi‚Ä¶   conf.high  CI Upper‚Ä¶     0.282 #> 5    ARM      AGE effectsi‚Ä¶      method     method Paired C‚Ä¶ #> 6    ARM      AGE effectsi‚Ä¶          mu    H0 Mean         0 #> 7    ARM      AGE effectsi‚Ä¶      paired  Paired t‚Ä¶      TRUE #> 8    ARM      AGE effectsi‚Ä¶   pooled_sd  Pooled S‚Ä¶      TRUE #> 9    ARM      AGE effectsi‚Ä¶ alternative  Alternat‚Ä¶ two.sided #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_hedges_g.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Hedge's G Test ‚Äî ard_effectsize_hedges_g","title":"ARD Hedge's G Test ‚Äî ard_effectsize_hedges_g","text":"Analysis results data paired non-paired Hedge's G Effect Size Test using effectsize::hedges_g().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_hedges_g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Hedge's G Test ‚Äî ard_effectsize_hedges_g","text":"","code":"ard_effectsize_hedges_g(data, by, variables, conf.level = 0.95, ...)  ard_effectsize_paired_hedges_g(data, by, variables, id, conf.level = 0.95, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_hedges_g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Hedge's G Test ‚Äî ard_effectsize_hedges_g","text":"data (data.frame) data frame. See details. (tidy-select) column name compare . Must categorical variable exactly two levels. variables (tidy-select) column names compared. Must continuous variable. Independent tests run variable conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... arguments passed effectsize::hedges_g(...) id (tidy-select) column name subject participant ID","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_hedges_g.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Hedge's G Test ‚Äî ard_effectsize_hedges_g","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_hedges_g.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD Hedge's G Test ‚Äî ard_effectsize_hedges_g","text":"ard_effectsize_hedges_g() function, data expected one row per subject. data passed effectsize::hedges_g(data[[variable]]~data[[]], data, paired = FALSE, ...). ard_effectsize_paired_hedges_g() function, data expected one row per subject per level. effect size calculated, data reshaped wide format one row per subject. data passed effectsize::hedges_g(x = data_wide[[<level 1>]], y = data_wide[[<level 2>]], paired = TRUE, ...).","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_effectsize_hedges_g.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Hedge's G Test ‚Äî ard_effectsize_hedges_g","text":"","code":"cards::ADSL |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   ard_effectsize_hedges_g(by = ARM, variables = AGE) #> {cards} data frame: 9 x 9 #>   group1 variable   context   stat_name stat_label      stat #> 1    ARM      AGE effectsi‚Ä¶    estimate  Effect S‚Ä¶       0.1 #> 2    ARM      AGE effectsi‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> 3    ARM      AGE effectsi‚Ä¶    conf.low  CI Lower‚Ä¶      -0.2 #> 4    ARM      AGE effectsi‚Ä¶   conf.high  CI Upper‚Ä¶     0.399 #> 5    ARM      AGE effectsi‚Ä¶      method     method Hedge's G #> 6    ARM      AGE effectsi‚Ä¶          mu    H0 Mean         0 #> 7    ARM      AGE effectsi‚Ä¶      paired  Paired t‚Ä¶     FALSE #> 8    ARM      AGE effectsi‚Ä¶   pooled_sd  Pooled S‚Ä¶      TRUE #> 9    ARM      AGE effectsi‚Ä¶ alternative  Alternat‚Ä¶ two.sided #> ‚Ñπ 3 more variables: fmt_fun, warning, error  # constructing a paired data set, # where patients receive both treatments cards::ADSL[c(\"ARM\", \"AGE\")] |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>   dplyr::arrange(USUBJID, ARM) |>   dplyr::group_by(USUBJID) |>   dplyr::filter(dplyr::n() > 1) |>   ard_effectsize_paired_hedges_g(by = ARM, variables = AGE, id = USUBJID) #> {cards} data frame: 9 x 9 #>   group1 variable   context   stat_name stat_label      stat #> 1    ARM      AGE effectsi‚Ä¶    estimate  Effect S‚Ä¶     0.068 #> 2    ARM      AGE effectsi‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> 3    ARM      AGE effectsi‚Ä¶    conf.low  CI Lower‚Ä¶    -0.144 #> 4    ARM      AGE effectsi‚Ä¶   conf.high  CI Upper‚Ä¶      0.28 #> 5    ARM      AGE effectsi‚Ä¶      method     method Paired H‚Ä¶ #> 6    ARM      AGE effectsi‚Ä¶          mu    H0 Mean         0 #> 7    ARM      AGE effectsi‚Ä¶      paired  Paired t‚Ä¶      TRUE #> 8    ARM      AGE effectsi‚Ä¶   pooled_sd  Pooled S‚Ä¶      TRUE #> 9    ARM      AGE effectsi‚Ä¶ alternative  Alternat‚Ä¶ two.sided #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_emmeans_mean_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD for LS Mean Difference ‚Äî ard_emmeans_mean_difference","title":"ARD for LS Mean Difference ‚Äî ard_emmeans_mean_difference","text":"function calculates least-squares mean differences using 'emmeans' package using following   arguments data, formula, method, method.args, package used construct regression model via cardx::construct_model().","code":"emmeans::emmeans(object = <regression model>, specs = ~ <primary covariate>) |>   emmeans::contrast(method = \"pairwise\") |>   summary(infer = TRUE, level = <confidence level>)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_emmeans_mean_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD for LS Mean Difference ‚Äî ard_emmeans_mean_difference","text":"","code":"ard_emmeans_mean_difference(   data,   formula,   method,   method.args = list(),   package = \"base\",   response_type = c(\"continuous\", \"dichotomous\"),   conf.level = 0.95,   primary_covariate = getElement(attr(stats::terms(formula), \"term.labels\"), 1L) )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_emmeans_mean_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD for LS Mean Difference ‚Äî ard_emmeans_mean_difference","text":"data (data.frame/survey.design) data frame survey design object formula (formula) formula method (string) string function naming function called, e.g. \"glm\". function belongs library attached, package name must specified package argument. method.args (named list) named list arguments passed method. Note list may contain non-standard evaluation components. wrapping function functions, argument must passed way evaluate list, e.g. using rlang's  embrace operator {{ . }}. package (string) package name temporarily loaded function specified method executed. response_type (string) string indicating whether model outcome 'continuous' 'dichotomous'. 'dichotomous', call emmeans::emmeans() supplemented argument regrid=\"response\". conf.level (scalar numeric) confidence level confidence interval. Default 0.95. primary_covariate (string) string indicating primary covariate (typically dichotomous treatment variable). Default first covariate listed formula.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_emmeans_mean_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD for LS Mean Difference ‚Äî ard_emmeans_mean_difference","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_emmeans_mean_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD for LS Mean Difference ‚Äî ard_emmeans_mean_difference","text":"","code":"ard_emmeans_mean_difference(   data = mtcars,   formula = mpg ~ am + cyl,   method = \"lm\" ) #> {cards} data frame: 8 x 10 #>   group1 variable variable_level  stat_name stat_label      stat #> 1     am contrast      am0 - am1   estimate  Mean Dif‚Ä¶    -2.567 #> 2     am contrast      am0 - am1  std.error  std.error     1.291 #> 3     am contrast      am0 - am1         df         df        29 #> 4     am contrast      am0 - am1   conf.low  CI Lower‚Ä¶    -5.208 #> 5     am contrast      am0 - am1  conf.high  CI Upper‚Ä¶     0.074 #> 6     am contrast      am0 - am1    p.value    p-value     0.056 #> 7     am contrast      am0 - am1 conf.level  CI Confi‚Ä¶      0.95 #> 8     am contrast      am0 - am1     method     method Least-sq‚Ä¶ #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error  ard_emmeans_mean_difference(   data = mtcars,   formula = vs ~ am + mpg,   method = \"glm\",   method.args = list(family = binomial),   response_type = \"dichotomous\" ) #> {cards} data frame: 8 x 10 #>   group1 variable variable_level  stat_name stat_label      stat #> 1     am contrast      am0 - am1   estimate  Mean Dif‚Ä¶      0.61 #> 2     am contrast      am0 - am1  std.error  std.error     0.229 #> 3     am contrast      am0 - am1         df         df       Inf #> 4     am contrast      am0 - am1   conf.low  CI Lower‚Ä¶     0.162 #> 5     am contrast      am0 - am1  conf.high  CI Upper‚Ä¶     1.059 #> 6     am contrast      am0 - am1    p.value    p-value     0.008 #> 7     am contrast      am0 - am1 conf.level  CI Confi‚Ä¶      0.95 #> 8     am contrast      am0 - am1     method     method Least-sq‚Ä¶ #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_incidence_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Incidence Rate ‚Äî ard_incidence_rate","title":"ARD Incidence Rate ‚Äî ard_incidence_rate","text":"Function takes time risk variable (time) event count variable (count) calculates incidence rate person-years. Incidence rate calculated : Total number events occurred / Total person-time risk","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_incidence_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Incidence Rate ‚Äî ard_incidence_rate","text":"","code":"ard_incidence_rate(   data,   time,   count = NULL,   id = NULL,   by = NULL,   strata = NULL,   n_person_time = 100,   unit_label = \"time\",   conf.level = 0.95,   conf.type = c(\"normal\", \"normal-log\", \"exact\", \"byar\") )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_incidence_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Incidence Rate ‚Äî ard_incidence_rate","text":"data (data.frame) data frame. time (tidy-select) column name time risk variable. count (tidy-select) column name variable indicating count events occurred. NULL, row data assumed correspond single event occurrence. id (tidy-select) column name used identify unique subjects data. NULL, row data assumed correspond unique subject. , strata (tidy-select) columns tabulate /stratify summary statistic calculation. Arguments similar, important distinction: : results calculated combinations columns specified, including unobserved combinations unobserved factor levels. strata: results calculated observed combinations columns specified. Arguments may used conjunction one another. n_person_time (numeric) amount person-time estimate incidence rate . Defaults 100. unit_label (string) label unit values time estimated person-time output (e.g. \"years\" person-years, \"days\" person-days, etc.). desired person-time estimate unit match current time unit, values time converted correct unit pre-processing. Defaults \"time\" (person-time). conf.level (numeric) confidence level estimated incidence rate. conf.type (string) confidence interval type estimated incidence rate. One : normal (default), normal-log, exact, byar.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_incidence_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Incidence Rate ‚Äî ard_incidence_rate","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_incidence_rate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD Incidence Rate ‚Äî ard_incidence_rate","text":"formulas used calculate confidence interval CI type follows, \\(x_i\\) \\(t_i\\) represent number events follow-time subject \\(\\), respectively. byar: Byar's approximation Poisson CI. continuity correction 0.5 included calculation. $$CI = (\\sum{x_i} + 0.5) (1 - 1 / (9 \\times (\\sum{x_i} + 0.5)) \\pm Z_{1 - \\alpha / 2} / (3 \\sqrt{\\sum{x_i} + 0.5}))^3 / \\sum{t_i}$$ normal: Normal CI. $$CI = \\sum{x_i} / \\sum{t_i} \\pm Z_{1 - \\alpha / 2} \\sqrt{\\sum{x_i}} / \\sum{t_i}$$ normal-log: Normal-Log CI. $$CI = \\exp(\\log(\\sum{x_i} / \\sum{t_i}) \\pm Z_{1 - \\alpha / 2} / \\sqrt{\\sum{x_i}})$$ exact: Exact CI Poisson mean. $$CI_{lower} = \\chi^2_{\\alpha / 2, 2\\sum{x_i} + 2} / {2 \\sum{t_i}}$$ $$CI_{upper} = \\chi^2_{1 - \\alpha / 2, 2\\sum{x_i} + 2} / {2 \\sum{t_i}}$$","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_incidence_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Incidence Rate ‚Äî ard_incidence_rate","text":"","code":"set.seed(1) data <- data.frame(   USUBJID = 1:100,   TRTA = sample(LETTERS[1:3], 100, replace = TRUE),   AETTE1 = abs(rnorm(100, mean = 0.5)),   AETOT1 = sample(0:20, 100, replace = TRUE) )  data |>   ard_incidence_rate(time = AETTE1, count = AETOT1, id = USUBJID, by = TRTA, unit_label = \"years\") #> {cards} data frame: 27 x 10 #>    group1 group1_level variable       stat_name stat_label     stat #> 1    TRTA            A   AETTE1        estimate  Incidenc‚Ä¶  976.305 #> 2    TRTA            A   AETTE1       std.error  Standard‚Ä¶    0.578 #> 3    TRTA            A   AETTE1        conf.low  CI Lower‚Ä¶  862.958 #> 4    TRTA            A   AETTE1       conf.high  CI Upper‚Ä¶ 1089.653 #> 5    TRTA            A   AETTE1       conf.type    CI Type   normal #> 6    TRTA            A   AETTE1      conf.level  CI Confi‚Ä¶     0.95 #> 7    TRTA            A   AETTE1 tot_person_time  Person-Y‚Ä¶   29.192 #> 8    TRTA            A   AETTE1        n_events  Number o‚Ä¶      285 #> 9    TRTA            A   AETTE1               N  Number o‚Ä¶       33 #> 10   TRTA            B   AETTE1        estimate  Incidenc‚Ä¶ 1373.986 #> ‚Ñπ 17 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_missing.survey.design.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Missing Survey Statistics ‚Äî ard_missing.survey.design","title":"ARD Missing Survey Statistics ‚Äî ard_missing.survey.design","text":"Compute Analysis Results Data (ARD) statistics related data missingness survey objects","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_missing.survey.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Missing Survey Statistics ‚Äî ard_missing.survey.design","text":"","code":"# S3 method for class 'survey.design' ard_missing(   data,   variables,   by = NULL,   statistic = everything() ~ c(\"N_obs\", \"N_miss\", \"N_nonmiss\", \"p_miss\", \"p_nonmiss\",     \"N_obs_unweighted\", \"N_miss_unweighted\", \"N_nonmiss_unweighted\", \"p_miss_unweighted\",     \"p_nonmiss_unweighted\"),   fmt_fun = NULL,   stat_label = everything() ~ list(N_obs = \"Total N\", N_miss = \"N Missing\", N_nonmiss =     \"N not Missing\", p_miss = \"% Missing\", p_nonmiss = \"% not Missing\",     N_obs_unweighted = \"Total N (unweighted)\", N_miss_unweighted =     \"N Missing (unweighted)\", N_nonmiss_unweighted = \"N not Missing (unweighted)\",     p_miss_unweighted = \"% Missing (unweighted)\", p_nonmiss_unweighted =     \"% not Missing (unweighted)\"),   fmt_fn = deprecated(),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_missing.survey.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Missing Survey Statistics ‚Äî ard_missing.survey.design","text":"data (survey.design) design object often created survey::svydesign(). variables (tidy-select) columns include summaries. (tidy-select) results calculated combinations column specified variables. single column may specified. statistic (formula-list-selector) named list, list formulas, single formula list element character vector statistic names include. See default value options. fmt_fun (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(mean = \"Mean\", sd = \"SD\") everything() ~ list(mean ~ \"Mean\", sd ~ \"SD\"). fmt_fn  ... dots future extensions must empty.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_missing.survey.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Missing Survey Statistics ‚Äî ard_missing.survey.design","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_missing.survey.design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Missing Survey Statistics ‚Äî ard_missing.survey.design","text":"","code":"svy_titanic <- survey::svydesign(~1, data = as.data.frame(Titanic), weights = ~Freq)  ard_missing(svy_titanic, variables = c(Class, Age), by = Survived) #> {cards} data frame: 40 x 10 #>      group1 group1_level variable stat_name stat_label stat #> 1  Survived           No    Class N_nonmiss  N not Mi‚Ä¶ 1490 #> 2  Survived           No    Class     N_obs    Total N 1490 #> 3  Survived           No    Class p_nonmiss  % not Mi‚Ä¶    1 #> 4  Survived           No    Class    N_miss  N Missing    0 #> 5  Survived           No    Class    p_miss  % Missing    0 #> 6  Survived           No      Age N_nonmiss  N not Mi‚Ä¶ 1490 #> 7  Survived           No      Age     N_obs    Total N 1490 #> 8  Survived           No      Age p_nonmiss  % not Mi‚Ä¶    1 #> 9  Survived           No      Age    N_miss  N Missing    0 #> 10 Survived           No      Age    p_miss  % Missing    0 #> ‚Ñπ 30 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression ARD ‚Äî ard_regression","title":"Regression ARD ‚Äî ard_regression","text":"Function takes regression model object converts ARD structure using broom.helpers package.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression ARD ‚Äî ard_regression","text":"","code":"ard_regression(x, ...)  # Default S3 method ard_regression(x, tidy_fun = broom.helpers::tidy_with_broom_or_parameters, ...)  # S3 method for class 'data.frame' ard_regression(   x,   formula,   method,   method.args = list(),   package = \"base\",   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression ARD ‚Äî ard_regression","text":"x (regression model/data.frame) regression model object data frame ... Arguments passed broom.helpers::tidy_plus_plus() tidy_fun (function) tidier. Default broom.helpers::tidy_with_broom_or_parameters formula (formula) formula method (string) string function naming function called, e.g. \"glm\". function belongs library attached, package name must specified package argument. method.args (named list) named list arguments passed method. Note list may contain non-standard evaluation components. wrapping function functions, argument must passed way evaluate list, e.g. using rlang's  embrace operator {{ . }}. package (string) package name temporarily loaded function specified method executed.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression ARD ‚Äî ard_regression","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression ARD ‚Äî ard_regression","text":"","code":"lm(AGE ~ ARM, data = cards::ADSL) |>   ard_regression(add_estimate_to_reference_rows = TRUE) #> {cards} data frame: 43 x 9 #>    variable variable_level   context      stat_name stat_label      stat #> 1       ARM        Placebo regressi‚Ä¶           term       term ARMPlace‚Ä¶ #> 2       ARM        Placebo regressi‚Ä¶      var_label      Label Descript‚Ä¶ #> 3       ARM        Placebo regressi‚Ä¶      var_class      Class character #> 4       ARM        Placebo regressi‚Ä¶       var_type       Type categori‚Ä¶ #> 5       ARM        Placebo regressi‚Ä¶    var_nlevels   N Levels         3 #> 6       ARM        Placebo regressi‚Ä¶      contrasts  contrasts contr.tr‚Ä¶ #> 7       ARM        Placebo regressi‚Ä¶ contrasts_type  Contrast‚Ä¶ treatment #> 8       ARM        Placebo regressi‚Ä¶  reference_row  referenc‚Ä¶      TRUE #> 9       ARM        Placebo regressi‚Ä¶          label  Level La‚Ä¶   Placebo #> 10      ARM        Placebo regressi‚Ä¶          n_obs     N Obs.        86 #> ‚Ñπ 33 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 3 more variables: fmt_fun, warning, error  ard_regression(   x = cards::ADSL,   formula = AGE ~ ARM,   method = \"lm\" ) #> {cards} data frame: 43 x 9 #>    variable variable_level   context      stat_name stat_label      stat #> 1       ARM        Placebo regressi‚Ä¶           term       term ARMPlace‚Ä¶ #> 2       ARM        Placebo regressi‚Ä¶      var_label      Label Descript‚Ä¶ #> 3       ARM        Placebo regressi‚Ä¶      var_class      Class character #> 4       ARM        Placebo regressi‚Ä¶       var_type       Type categori‚Ä¶ #> 5       ARM        Placebo regressi‚Ä¶    var_nlevels   N Levels         3 #> 6       ARM        Placebo regressi‚Ä¶      contrasts  contrasts contr.tr‚Ä¶ #> 7       ARM        Placebo regressi‚Ä¶ contrasts_type  Contrast‚Ä¶ treatment #> 8       ARM        Placebo regressi‚Ä¶  reference_row  referenc‚Ä¶      TRUE #> 9       ARM        Placebo regressi‚Ä¶          label  Level La‚Ä¶   Placebo #> 10      ARM        Placebo regressi‚Ä¶          n_obs     N Obs.        86 #> ‚Ñπ 33 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression_basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Regression ARD ‚Äî ard_regression_basic","title":"Basic Regression ARD ‚Äî ard_regression_basic","text":"function takes regression model provides basic statistics ARD structure. default output simpler ard_regression(). function primarily matches regression terms underlying variable names levels. default arguments used ","code":"broom.helpers::tidy_plus_plus(   add_reference_rows = FALSE,   add_estimate_to_reference_rows = FALSE,   add_n = FALSE,   intercept = FALSE )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression_basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Regression ARD ‚Äî ard_regression_basic","text":"","code":"ard_regression_basic(x, ...)  # Default S3 method ard_regression_basic(   x,   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   stats_to_remove = c(\"term\", \"var_type\", \"var_label\", \"var_class\", \"label\",     \"contrasts_type\", \"contrasts\", \"var_nlevels\"),   ... )  # S3 method for class 'data.frame' ard_regression_basic(   x,   formula,   method,   method.args = list(),   package = \"base\",   tidy_fun = broom.helpers::tidy_with_broom_or_parameters,   stats_to_remove = c(\"term\", \"var_type\", \"var_label\", \"var_class\", \"label\",     \"contrasts_type\", \"contrasts\", \"var_nlevels\"),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression_basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic Regression ARD ‚Äî ard_regression_basic","text":"x (regression model/data.frame) regression model object data frame ... Arguments passed broom.helpers::tidy_plus_plus() tidy_fun (function) tidier. Default broom.helpers::tidy_with_broom_or_parameters stats_to_remove (character) character vector statistic names remove. Default c(\"term\", \"var_type\", \"var_label\", \"var_class\", \"label\", \"contrasts_type\", \"contrasts\", \"var_nlevels\"). formula (formula) formula method (string) string function naming function called, e.g. \"glm\". function belongs library attached, package name must specified package argument. method.args (named list) named list arguments passed method. Note list may contain non-standard evaluation components. wrapping function functions, argument must passed way evaluate list, e.g. using rlang's  embrace operator {{ . }}. package (string) package name temporarily loaded function specified method executed.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression_basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic Regression ARD ‚Äî ard_regression_basic","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_regression_basic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic Regression ARD ‚Äî ard_regression_basic","text":"","code":"lm(AGE ~ ARM, data = cards::ADSL) |>   ard_regression_basic() #> {cards} data frame: 12 x 9 #>    variable variable_level   context stat_name stat_label   stat #> 1       ARM      Xanomeli‚Ä¶ regressi‚Ä¶  estimate  Coeffici‚Ä¶ -0.828 #> 2       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ std.error  Standard‚Ä¶  1.267 #> 3       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ statistic  statistic -0.654 #> 4       ARM      Xanomeli‚Ä¶ regressi‚Ä¶   p.value    p-value  0.514 #> 5       ARM      Xanomeli‚Ä¶ regressi‚Ä¶  conf.low  CI Lower‚Ä¶ -3.324 #> 6       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ conf.high  CI Upper‚Ä¶  1.668 #> 7       ARM      Xanomeli‚Ä¶ regressi‚Ä¶  estimate  Coeffici‚Ä¶  0.457 #> 8       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ std.error  Standard‚Ä¶  1.267 #> 9       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ statistic  statistic  0.361 #> 10      ARM      Xanomeli‚Ä¶ regressi‚Ä¶   p.value    p-value  0.719 #> 11      ARM      Xanomeli‚Ä¶ regressi‚Ä¶  conf.low  CI Lower‚Ä¶ -2.039 #> 12      ARM      Xanomeli‚Ä¶ regressi‚Ä¶ conf.high  CI Upper‚Ä¶  2.953 #> ‚Ñπ 3 more variables: fmt_fun, warning, error  ard_regression_basic(   x = cards::ADSL,   formula = AGE ~ ARM,   method = \"lm\" ) #> {cards} data frame: 12 x 9 #>    variable variable_level   context stat_name stat_label   stat #> 1       ARM      Xanomeli‚Ä¶ regressi‚Ä¶  estimate  Coeffici‚Ä¶ -0.828 #> 2       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ std.error  Standard‚Ä¶  1.267 #> 3       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ statistic  statistic -0.654 #> 4       ARM      Xanomeli‚Ä¶ regressi‚Ä¶   p.value    p-value  0.514 #> 5       ARM      Xanomeli‚Ä¶ regressi‚Ä¶  conf.low  CI Lower‚Ä¶ -3.324 #> 6       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ conf.high  CI Upper‚Ä¶  1.668 #> 7       ARM      Xanomeli‚Ä¶ regressi‚Ä¶  estimate  Coeffici‚Ä¶  0.457 #> 8       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ std.error  Standard‚Ä¶  1.267 #> 9       ARM      Xanomeli‚Ä¶ regressi‚Ä¶ statistic  statistic  0.361 #> 10      ARM      Xanomeli‚Ä¶ regressi‚Ä¶   p.value    p-value  0.719 #> 11      ARM      Xanomeli‚Ä¶ regressi‚Ä¶  conf.low  CI Lower‚Ä¶ -2.039 #> 12      ARM      Xanomeli‚Ä¶ regressi‚Ä¶ conf.high  CI Upper‚Ä¶  2.953 #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_smd_smd.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Standardized Mean Difference ‚Äî ard_smd_smd","title":"ARD Standardized Mean Difference ‚Äî ard_smd_smd","text":"Standardized mean difference calculated via smd::smd() na.rm = TRUE. Additionally, function add confidence interval SMD std.error=TRUE, original smd::smd() include.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_smd_smd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Standardized Mean Difference ‚Äî ard_smd_smd","text":"","code":"ard_smd_smd(data, by, variables, std.error = TRUE, conf.level = 0.95, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_smd_smd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Standardized Mean Difference ‚Äî ard_smd_smd","text":"data (data.frame/survey.design) data frame object class 'survey.design' (typically created survey::svydesign()). (tidy-select) column name compare . variables (tidy-select) column names compared. Independent tests computed variable. std.error (scalar logical) Logical indicator computing standard errors using smd::compute_smd_var(). Default TRUE. conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... arguments passed smd::smd()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_smd_smd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Standardized Mean Difference ‚Äî ard_smd_smd","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_smd_smd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Standardized Mean Difference ‚Äî ard_smd_smd","text":"","code":"ard_smd_smd(cards::ADSL, by = SEX, variables = AGE) #> {cards} data frame: 6 x 9 #>   group1 variable context stat_name stat_label      stat #> 1    SEX      AGE smd_smd  estimate  Standard‚Ä¶     0.157 #> 2    SEX      AGE smd_smd std.error  Standard‚Ä¶     0.127 #> 3    SEX      AGE smd_smd  conf.low   conf.low    -0.091 #> 4    SEX      AGE smd_smd conf.high  conf.high     0.405 #> 5    SEX      AGE smd_smd    method     method Standard‚Ä¶ #> 6    SEX      AGE smd_smd      gref  Integer ‚Ä¶         1 #> ‚Ñπ 3 more variables: fmt_fun, warning, error ard_smd_smd(cards::ADSL, by = SEX, variables = AGEGR1) #> {cards} data frame: 6 x 9 #>   group1 variable context stat_name stat_label      stat #> 1    SEX   AGEGR1 smd_smd  estimate  Standard‚Ä¶     0.103 #> 2    SEX   AGEGR1 smd_smd std.error  Standard‚Ä¶     0.127 #> 3    SEX   AGEGR1 smd_smd  conf.low   conf.low    -0.145 #> 4    SEX   AGEGR1 smd_smd conf.high  conf.high     0.351 #> 5    SEX   AGEGR1 smd_smd    method     method Standard‚Ä¶ #> 6    SEX   AGEGR1 smd_smd      gref  Integer ‚Ä¶         1 #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_anova.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD ANOVA ‚Äî ard_stats_anova","title":"ARD ANOVA ‚Äî ard_stats_anova","text":"Prepare ANOVA results stats::anova() function. Users may pass pre-calculated stats::anova() object list formulas. latter case, models constructed using information passed models passed stats::anova().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_anova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD ANOVA ‚Äî ard_stats_anova","text":"","code":"ard_stats_anova(x, ...)  # S3 method for class 'anova' ard_stats_anova(x, method_text = \"ANOVA results from `stats::anova()`\", ...)  # S3 method for class 'data.frame' ard_stats_anova(   x,   formulas,   method,   method.args = list(),   package = \"base\",   method_text = \"ANOVA results from `stats::anova()`\",   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_anova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD ANOVA ‚Äî ard_stats_anova","text":"x (anova data.frame) object class 'anova' created stats::anova() data frame ... dots future extensions must empty. method_text (string) string method used. Default \"ANOVA results stats::anova()\". provide option change stats::anova() can produce results many types models may warrant precise description. formulas (list) list formulas method (string) string function naming function called, e.g. \"glm\". function belongs library attached, package name must specified package argument. method.args (named list) named list arguments passed method. Note list may contain non-standard evaluation components. wrapping function functions, argument must passed way evaluate list, e.g. using rlang's  embrace operator {{ . }}. package (string) package name temporarily loaded function specified method executed.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_anova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD ANOVA ‚Äî ard_stats_anova","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_anova.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD ANOVA ‚Äî ard_stats_anova","text":"list formulas supplied ard_stats_anova(), formulas along information arguments, used construct models pass models stats::anova(). models constructed using rlang::exec(), similar .call().   function executed withr::with_namespace(package), allows use ard_stats_anova(method) packages, e.g. package = 'lme4' must specified method = 'glmer'. See example .","code":"rlang::exec(.fn = method, formula = formula, data = data, !!!method.args)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_anova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD ANOVA ‚Äî ard_stats_anova","text":"","code":"anova(   lm(mpg ~ am, mtcars),   lm(mpg ~ am + hp, mtcars) ) |>   ard_stats_anova() #> {cards} data frame: 11 x 8 #>    variable   context   stat_name stat_label      stat fmt_fun #> 1   model_1 stats_an‚Ä¶        term       term  mpg ~ am    NULL #> 2   model_1 stats_an‚Ä¶ df.residual  df for r‚Ä¶        30       1 #> 3   model_1 stats_an‚Ä¶         rss  Residual‚Ä¶   720.897       1 #> 4   model_2 stats_an‚Ä¶        term       term mpg ~ am‚Ä¶    NULL #> 5   model_2 stats_an‚Ä¶ df.residual  df for r‚Ä¶        29       1 #> 6   model_2 stats_an‚Ä¶         rss  Residual‚Ä¶   245.439       1 #> 7   model_2 stats_an‚Ä¶          df  Degrees ‚Ä¶         1       1 #> 8   model_2 stats_an‚Ä¶       sumsq  Sum of S‚Ä¶   475.457       1 #> 9   model_2 stats_an‚Ä¶   statistic  statistic    56.178       1 #> 10  model_2 stats_an‚Ä¶     p.value    p-value         0       1 #> 11  model_2 stats_an‚Ä¶      method     method ANOVA re‚Ä¶    NULL #> ‚Ñπ 2 more variables: warning, error  ard_stats_anova(   x = mtcars,   formulas = list(am ~ mpg, am ~ mpg + hp),   method = \"glm\",   method.args = list(family = binomial) ) #> {cards} data frame: 10 x 8 #>    variable   context         stat_name stat_label      stat fmt_fun #> 1   model_1 stats_an‚Ä¶              term       term  am ~ mpg    NULL #> 2   model_1 stats_an‚Ä¶       df.residual  df for r‚Ä¶        30       1 #> 3   model_1 stats_an‚Ä¶ residual.deviance  residual‚Ä¶    29.675       1 #> 4   model_2 stats_an‚Ä¶              term       term am ~ mpg‚Ä¶    NULL #> 5   model_2 stats_an‚Ä¶       df.residual  df for r‚Ä¶        29       1 #> 6   model_2 stats_an‚Ä¶ residual.deviance  residual‚Ä¶    19.233       1 #> 7   model_2 stats_an‚Ä¶                df  Degrees ‚Ä¶         1       1 #> 8   model_2 stats_an‚Ä¶          deviance   deviance    10.443       1 #> 9   model_2 stats_an‚Ä¶           p.value    p-value     0.001       1 #> 10  model_2 stats_an‚Ä¶            method     method ANOVA re‚Ä¶    NULL #> ‚Ñπ 2 more variables: warning, error  ard_stats_anova(   x = mtcars,   formulas = list(am ~ 1 + (1 | vs), am ~ mpg + (1 | vs)),   method = \"glmer\",   method.args = list(family = binomial),   package = \"lme4\" ) #> {cards} data frame: 16 x 8 #>    variable   context  stat_name stat_label      stat   warning #> 1   model_1 stats_an‚Ä¶       term       term    MODEL1 failed t‚Ä¶ #> 2   model_1 stats_an‚Ä¶       npar       npar         2 failed t‚Ä¶ #> 3   model_1 stats_an‚Ä¶        AIC        AIC     47.23 failed t‚Ä¶ #> 4   model_1 stats_an‚Ä¶        BIC        BIC    50.161 failed t‚Ä¶ #> 5   model_1 stats_an‚Ä¶     logLik     logLik   -21.615 failed t‚Ä¶ #> 6   model_1 stats_an‚Ä¶ minus2logL  minus2lo‚Ä¶     43.23 failed t‚Ä¶ #> 7   model_2 stats_an‚Ä¶       term       term    MODEL2 failed t‚Ä¶ #> 8   model_2 stats_an‚Ä¶       npar       npar         3 failed t‚Ä¶ #> 9   model_2 stats_an‚Ä¶        AIC        AIC     35.25 failed t‚Ä¶ #> 10  model_2 stats_an‚Ä¶        BIC        BIC    39.647 failed t‚Ä¶ #> 11  model_2 stats_an‚Ä¶     logLik     logLik   -14.625 failed t‚Ä¶ #> 12  model_2 stats_an‚Ä¶ minus2logL  minus2lo‚Ä¶     29.25 failed t‚Ä¶ #> 13  model_2 stats_an‚Ä¶  statistic  statistic    13.979 failed t‚Ä¶ #> 14  model_2 stats_an‚Ä¶         df  Degrees ‚Ä¶         1 failed t‚Ä¶ #> 15  model_2 stats_an‚Ä¶    p.value    p-value         0 failed t‚Ä¶ #> 16  model_2 stats_an‚Ä¶     method     method ANOVA re‚Ä¶ failed t‚Ä¶ #> ‚Ñπ 2 more variables: fmt_fun, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_aov.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD ANOVA ‚Äî ard_stats_aov","title":"ARD ANOVA ‚Äî ard_stats_aov","text":"Analysis results data Analysis Variance. Calculated stats::aov()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_aov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD ANOVA ‚Äî ard_stats_aov","text":"","code":"ard_stats_aov(formula, data, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_aov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD ANOVA ‚Äî ard_stats_aov","text":"formula formula specifying model. data data frame variables specified     formula found. missing, variables searched     standard way. ... arguments passed stats::aov(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_aov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD ANOVA ‚Äî ard_stats_aov","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_aov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD ANOVA ‚Äî ard_stats_aov","text":"","code":"ard_stats_aov(AGE ~ ARM, data = cards::ADSL) #> {cards} data frame: 5 x 8 #>   variable   context stat_name stat_label   stat fmt_fun #> 1      ARM stats_aov     sumsq  Sum of S‚Ä¶ 71.386       1 #> 2      ARM stats_aov        df  Degrees ‚Ä¶      2       1 #> 3      ARM stats_aov    meansq  Mean of ‚Ä¶ 35.693       1 #> 4      ARM stats_aov statistic  Statistic  0.523       1 #> 5      ARM stats_aov   p.value    p-value  0.593       1 #> ‚Ñπ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_chisq_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Chi-squared Test ‚Äî ard_stats_chisq_test","title":"ARD Chi-squared Test ‚Äî ard_stats_chisq_test","text":"Analysis results data Pearson's Chi-squared Test. Calculated chisq.test(x = data[[variable]], y = data[[]], ...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_chisq_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Chi-squared Test ‚Äî ard_stats_chisq_test","text":"","code":"ard_stats_chisq_test(data, by, variables, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_chisq_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Chi-squared Test ‚Äî ard_stats_chisq_test","text":"data (data.frame) data frame. (tidy-select) column name compare . variables (tidy-select) column names compared. Independent tests computed variable. ... additional arguments passed chisq.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_chisq_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Chi-squared Test ‚Äî ard_stats_chisq_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_chisq_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Chi-squared Test ‚Äî ard_stats_chisq_test","text":"","code":"cards::ADSL |>   ard_stats_chisq_test(by = \"ARM\", variables = \"AGEGR1\") #> {cards} data frame: 9 x 9 #>   group1 variable   context        stat_name stat_label #> 1    ARM   AGEGR1 stats_ch‚Ä¶        statistic  X-square‚Ä¶ #> 2    ARM   AGEGR1 stats_ch‚Ä¶          p.value    p-value #> 3    ARM   AGEGR1 stats_ch‚Ä¶        parameter  Degrees ‚Ä¶ #> 4    ARM   AGEGR1 stats_ch‚Ä¶           method     method #> 5    ARM   AGEGR1 stats_ch‚Ä¶          correct    correct #> 6    ARM   AGEGR1 stats_ch‚Ä¶                p          p #> 7    ARM   AGEGR1 stats_ch‚Ä¶        rescale.p  rescale.p #> 8    ARM   AGEGR1 stats_ch‚Ä¶ simulate.p.value  simulate‚Ä¶ #> 9    ARM   AGEGR1 stats_ch‚Ä¶                B          B #>                          stat #> 1                       6.852 #> 2                       0.144 #> 3                           4 #> 4                   Pearson'‚Ä¶ #> 5                        TRUE #> 6 rep, 1/length(x), length(x) #> 7                       FALSE #> 8                       FALSE #> 9                        2000 #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_fisher_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Fisher's Exact Test ‚Äî ard_stats_fisher_test","title":"ARD Fisher's Exact Test ‚Äî ard_stats_fisher_test","text":"Analysis results data Fisher's Exact Test. Calculated fisher.test(x = data[[variable]], y = data[[]], ...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_fisher_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Fisher's Exact Test ‚Äî ard_stats_fisher_test","text":"","code":"ard_stats_fisher_test(data, by, variables, conf.level = 0.95, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_fisher_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Fisher's Exact Test ‚Äî ard_stats_fisher_test","text":"data (data.frame) data frame. (tidy-select) column name compare variables (tidy-select) column names compared. Independent tests computed variable. conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... additional arguments passed fisher.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_fisher_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Fisher's Exact Test ‚Äî ard_stats_fisher_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_fisher_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Fisher's Exact Test ‚Äî ard_stats_fisher_test","text":"","code":"cards::ADSL[1:30, ] |>   ard_stats_fisher_test(by = \"ARM\", variables = \"AGEGR1\") #> {cards} data frame: 12 x 9 #>    group1 variable   context        stat_name stat_label        stat #> 1     ARM   AGEGR1 stats_fi‚Ä¶          p.value    p-value       0.089 #> 2     ARM   AGEGR1 stats_fi‚Ä¶           method     method   Fisher's‚Ä¶ #> 3     ARM   AGEGR1 stats_fi‚Ä¶      alternative  alternat‚Ä¶   two.sided #> 4     ARM   AGEGR1 stats_fi‚Ä¶        workspace  workspace       2e+05 #> 5     ARM   AGEGR1 stats_fi‚Ä¶           hybrid     hybrid       FALSE #> 6     ARM   AGEGR1 stats_fi‚Ä¶       hybridPars  hybridPa‚Ä¶ c, 5, 80, 1 #> 7     ARM   AGEGR1 stats_fi‚Ä¶          control    control        list #> 8     ARM   AGEGR1 stats_fi‚Ä¶               or         or           1 #> 9     ARM   AGEGR1 stats_fi‚Ä¶         conf.int   conf.int        TRUE #> 10    ARM   AGEGR1 stats_fi‚Ä¶       conf.level  conf.lev‚Ä¶        0.95 #> 11    ARM   AGEGR1 stats_fi‚Ä¶ simulate.p.value  simulate‚Ä¶       FALSE #> 12    ARM   AGEGR1 stats_fi‚Ä¶                B          B        2000 #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_kruskal_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Kruskal-Wallis Test ‚Äî ard_stats_kruskal_test","title":"ARD Kruskal-Wallis Test ‚Äî ard_stats_kruskal_test","text":"Analysis results data Kruskal-Wallis Rank Sum Test. Calculated kruskal.test(data[[variable]], data[[]], ...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_kruskal_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Kruskal-Wallis Test ‚Äî ard_stats_kruskal_test","text":"","code":"ard_stats_kruskal_test(data, by, variables)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_kruskal_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Kruskal-Wallis Test ‚Äî ard_stats_kruskal_test","text":"data (data.frame) data frame. (tidy-select) column name compare . variables (tidy-select) column names compared. Independent tests computed variable.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_kruskal_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Kruskal-Wallis Test ‚Äî ard_stats_kruskal_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_kruskal_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Kruskal-Wallis Test ‚Äî ard_stats_kruskal_test","text":"","code":"cards::ADSL |>   ard_stats_kruskal_test(by = \"ARM\", variables = \"AGE\") #> {cards} data frame: 4 x 9 #>   group1 variable   context stat_name stat_label      stat #> 1    ARM      AGE stats_kr‚Ä¶ statistic  Kruskal-‚Ä¶     1.635 #> 2    ARM      AGE stats_kr‚Ä¶   p.value    p-value     0.442 #> 3    ARM      AGE stats_kr‚Ä¶ parameter  Degrees ‚Ä¶         2 #> 4    ARM      AGE stats_kr‚Ä¶    method     method Kruskal-‚Ä¶ #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mantelhaen_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Cochran-Mantel-Haenszel Chi-Squared Test ‚Äî ard_stats_mantelhaen_test","title":"ARD Cochran-Mantel-Haenszel Chi-Squared Test ‚Äî ard_stats_mantelhaen_test","text":"Analysis results data Cochran-Mantel-Haenszel Chi-Squared Test count data. Calculated mantelhaen.test(x = data[[variables]], y = data[[]], z = data[[strata]], ...).","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mantelhaen_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Cochran-Mantel-Haenszel Chi-Squared Test ‚Äî ard_stats_mantelhaen_test","text":"","code":"ard_stats_mantelhaen_test(data, by, variables, strata, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mantelhaen_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Cochran-Mantel-Haenszel Chi-Squared Test ‚Äî ard_stats_mantelhaen_test","text":"data (data.frame) data frame. (tidy-select) column name compare . variables (tidy-select) column names compared. Independent tests computed variable. strata (tidy-select) column name stratify . ... additional arguments passed stats::mantelhaen.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mantelhaen_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Cochran-Mantel-Haenszel Chi-Squared Test ‚Äî ard_stats_mantelhaen_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mantelhaen_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Cochran-Mantel-Haenszel Chi-Squared Test ‚Äî ard_stats_mantelhaen_test","text":"","code":"cards::ADSL |>   ard_stats_mantelhaen_test(by = \"ARM\", variables = \"AGEGR1\", strata = \"SEX\") #> {cards} data frame: 8 x 10 #>   group1 group2 variable   stat_name stat_label      stat #> 1    ARM    SEX   AGEGR1   statistic  Generali‚Ä¶     6.455 #> 2    ARM    SEX   AGEGR1     p.value    p-value     0.168 #> 3    ARM    SEX   AGEGR1   parameter  Degrees ‚Ä¶         4 #> 4    ARM    SEX   AGEGR1      method     method Cochran-‚Ä¶ #> 5    ARM    SEX   AGEGR1 alternative  alternat‚Ä¶ two.sided #> 6    ARM    SEX   AGEGR1     correct  Continui‚Ä¶      TRUE #> 7    ARM    SEX   AGEGR1       exact  Exact Co‚Ä¶     FALSE #> 8    ARM    SEX   AGEGR1  conf.level  CI Confi‚Ä¶      0.95 #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mcnemar_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD McNemar's Test ‚Äî ard_stats_mcnemar_test","title":"ARD McNemar's Test ‚Äî ard_stats_mcnemar_test","text":"Analysis results data McNemar's statistical test. two functions depending structure data. ard_stats_mcnemar_test() structure expected stats::mcnemar.test() ard_stats_mcnemar_test_long() one row per ID per group","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mcnemar_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD McNemar's Test ‚Äî ard_stats_mcnemar_test","text":"","code":"ard_stats_mcnemar_test(data, by, variables, ...)  ard_stats_mcnemar_test_long(data, by, variables, id, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mcnemar_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD McNemar's Test ‚Äî ard_stats_mcnemar_test","text":"data (data.frame) data frame. See details. (tidy-select) column name compare . variables (tidy-select) column names compared. Independent tests computed variable. ... arguments passed stats::mcnemar.test(...) id (tidy-select) column name subject participant ID","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mcnemar_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD McNemar's Test ‚Äî ard_stats_mcnemar_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mcnemar_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD McNemar's Test ‚Äî ard_stats_mcnemar_test","text":"ard_stats_mcnemar_test() function, data expected one row per subject. data passed stats::mcnemar.test(x = data[[variable]], y = data[[]], ...). Please use table(x = data[[variable]], y = data[[]]) check contingency table.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mcnemar_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD McNemar's Test ‚Äî ard_stats_mcnemar_test","text":"","code":"cards::ADSL |>   ard_stats_mcnemar_test(by = \"SEX\", variables = \"EFFFL\") #> {cards} data frame: 5 x 9 #>   group1 variable   context stat_name stat_label      stat #> 1    SEX    EFFFL stats_mc‚Ä¶ statistic  X-square‚Ä¶    111.91 #> 2    SEX    EFFFL stats_mc‚Ä¶   p.value    p-value         0 #> 3    SEX    EFFFL stats_mc‚Ä¶ parameter  Degrees ‚Ä¶         1 #> 4    SEX    EFFFL stats_mc‚Ä¶    method     method McNemar'‚Ä¶ #> 5    SEX    EFFFL stats_mc‚Ä¶   correct    correct      TRUE #> ‚Ñπ 3 more variables: fmt_fun, warning, error  set.seed(1234) cards::ADSL[c(\"USUBJID\", \"TRT01P\")] |>   dplyr::mutate(TYPE = \"PLANNED\") |>   dplyr::rename(TRT01 = TRT01P) %>%   dplyr::bind_rows(dplyr::mutate(., TYPE = \"ACTUAL\", TRT01 = sample(TRT01))) |>   ard_stats_mcnemar_test_long(     by = TYPE,     variable = TRT01,     id = USUBJID   ) #> {cards} data frame: 5 x 9 #>   group1 variable   context stat_name stat_label      stat #> 1   TYPE    TRT01 stats_mc‚Ä¶ statistic  X-square‚Ä¶     1.353 #> 2   TYPE    TRT01 stats_mc‚Ä¶   p.value    p-value     0.717 #> 3   TYPE    TRT01 stats_mc‚Ä¶ parameter  Degrees ‚Ä¶         3 #> 4   TYPE    TRT01 stats_mc‚Ä¶    method     method McNemar'‚Ä¶ #> 5   TYPE    TRT01 stats_mc‚Ä¶   correct    correct      TRUE #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mood_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Mood Test ‚Äî ard_stats_mood_test","title":"ARD Mood Test ‚Äî ard_stats_mood_test","text":"Analysis results data Mood two sample test scale. Note confused Brown-Mood test medians.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mood_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Mood Test ‚Äî ard_stats_mood_test","text":"","code":"ard_stats_mood_test(data, by, variables, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mood_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Mood Test ‚Äî ard_stats_mood_test","text":"data (data.frame) data frame. See details. (tidy-select) column name compare . variables (tidy-select) column name compared. Independent tests run variable. ... arguments passed mood.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mood_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Mood Test ‚Äî ard_stats_mood_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mood_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD Mood Test ‚Äî ard_stats_mood_test","text":"ard_stats_mood_test() function, data expected one row per subject. data passed mood.test(data[[variable]] ~ data[[]], ...).","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_mood_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Mood Test ‚Äî ard_stats_mood_test","text":"","code":"cards::ADSL |>   ard_stats_mood_test(by = \"SEX\", variables = \"AGE\") #> {cards} data frame: 4 x 9 #>   group1 variable   context   stat_name stat_label      stat #> 1    SEX      AGE stats_mo‚Ä¶   statistic  Z-Statis‚Ä¶     0.129 #> 2    SEX      AGE stats_mo‚Ä¶     p.value    p-value     0.897 #> 3    SEX      AGE stats_mo‚Ä¶      method     method Mood two‚Ä¶ #> 4    SEX      AGE stats_mo‚Ä¶ alternative  Alternat‚Ä¶ two.sided #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_oneway_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD One-way Test ‚Äî ard_stats_oneway_test","title":"ARD One-way Test ‚Äî ard_stats_oneway_test","text":"Analysis results data Testing Equal Means One-Way Layout. calculated oneway.test()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_oneway_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD One-way Test ‚Äî ard_stats_oneway_test","text":"","code":"ard_stats_oneway_test(formula, data, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_oneway_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD One-way Test ‚Äî ard_stats_oneway_test","text":"formula formula form lhs ~ rhs lhs     gives sample values rhs corresponding groups. data optional matrix data frame (similar: see     model.frame) containing variables     formula formula.  default variables taken     environment(formula). ... additional arguments passed oneway.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_oneway_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD One-way Test ‚Äî ard_stats_oneway_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_oneway_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD One-way Test ‚Äî ard_stats_oneway_test","text":"","code":"ard_stats_oneway_test(AGE ~ ARM, data = cards::ADSL) #> {cards} data frame: 6 x 9 #>   group1 variable   context stat_name stat_label      stat #> 1    ARM      AGE stats_on‚Ä¶    num.df  Degrees ‚Ä¶         2 #> 2    ARM      AGE stats_on‚Ä¶    den.df  Denomina‚Ä¶   167.237 #> 3    ARM      AGE stats_on‚Ä¶ statistic  F Statis‚Ä¶     0.547 #> 4    ARM      AGE stats_on‚Ä¶   p.value    p-value      0.58 #> 5    ARM      AGE stats_on‚Ä¶    method     Method One-way ‚Ä¶ #> 6    ARM      AGE stats_on‚Ä¶ var.equal  var.equal     FALSE #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_poisson_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Poisson Test ‚Äî ard_stats_poisson_test","title":"ARD Poisson Test ‚Äî ard_stats_poisson_test","text":"Analysis results data exact tests simple null hypothesis rate parameter Poisson distribution, comparison two rate parameters.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_poisson_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Poisson Test ‚Äî ard_stats_poisson_test","text":"","code":"ard_stats_poisson_test(   data,   variables,   na.rm = TRUE,   by = NULL,   conf.level = 0.95,   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_poisson_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Poisson Test ‚Äî ard_stats_poisson_test","text":"data (data.frame) data frame. See details. variables (tidy-select) names event time variables (order) used computations. Must length 2. na.rm (scalar logical) whether missing values removed computations. Default TRUE. (tidy-select) optional column name compare . conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... arguments passed poisson.test().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_poisson_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Poisson Test ‚Äî ard_stats_poisson_test","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_poisson_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD Poisson Test ‚Äî ard_stats_poisson_test","text":"ard_stats_poisson_test() function, data expected one row per subject. specified, exact Poisson test rate parameter performed. Otherwise, Poisson comparison two rate parameters performed levels . 2 levels, error occur.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_poisson_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Poisson Test ‚Äî ard_stats_poisson_test","text":"","code":"# Exact test of rate parameter against null hypothesis cards::ADTTE |>   ard_stats_poisson_test(variables = c(CNSR, AVAL)) #> {cards} data frame: 10 x 8 #>    variable   context   stat_name stat_label      stat fmt_fun #> 1      AVAL stats_po‚Ä¶    estimate  Estimate‚Ä¶     0.006       1 #> 2      AVAL stats_po‚Ä¶   statistic  Number o‚Ä¶       102       1 #> 3      AVAL stats_po‚Ä¶     p.value    p-value         0       1 #> 4      AVAL stats_po‚Ä¶   parameter  Expected‚Ä¶     16853       1 #> 5      AVAL stats_po‚Ä¶    conf.low  CI Lower‚Ä¶     0.005       1 #> 6      AVAL stats_po‚Ä¶   conf.high  CI Upper‚Ä¶     0.007       1 #> 7      AVAL stats_po‚Ä¶      method     method Exact Po‚Ä¶    NULL #> 8      AVAL stats_po‚Ä¶ alternative  alternat‚Ä¶ two.sided    NULL #> 9      AVAL stats_po‚Ä¶  conf.level  CI Confi‚Ä¶      0.95       1 #> 10     AVAL stats_po‚Ä¶          mu    H0 Mean         1       1 #> ‚Ñπ 2 more variables: warning, error  # Comparison test of ratio of 2 rate parameters against null hypothesis cards::ADTTE |>   dplyr::filter(TRTA %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   ard_stats_poisson_test(by = TRTA, variables = c(CNSR, AVAL)) #> {cards} data frame: 10 x 9 #>    group1 variable   context   stat_name stat_label      stat #> 1    TRTA     AVAL stats_po‚Ä¶    estimate  Estimate‚Ä¶     0.768 #> 2    TRTA     AVAL stats_po‚Ä¶   statistic  Number o‚Ä¶        57 #> 3    TRTA     AVAL stats_po‚Ä¶     p.value    p-value     0.293 #> 4    TRTA     AVAL stats_po‚Ä¶   parameter  Expected‚Ä¶    61.078 #> 5    TRTA     AVAL stats_po‚Ä¶    conf.low  CI Lower‚Ä¶     0.466 #> 6    TRTA     AVAL stats_po‚Ä¶   conf.high  CI Upper‚Ä¶     1.306 #> 7    TRTA     AVAL stats_po‚Ä¶      method     method Comparis‚Ä¶ #> 8    TRTA     AVAL stats_po‚Ä¶ alternative  alternat‚Ä¶ two.sided #> 9    TRTA     AVAL stats_po‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> 10   TRTA     AVAL stats_po‚Ä¶          mu    H0 Mean         1 #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_prop_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD 2-sample proportion test ‚Äî ard_stats_prop_test","title":"ARD 2-sample proportion test ‚Äî ard_stats_prop_test","text":"Analysis results data 2-sample test proportions using stats::prop.test().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_prop_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD 2-sample proportion test ‚Äî ard_stats_prop_test","text":"","code":"ard_stats_prop_test(data, by, variables, conf.level = 0.95, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_prop_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD 2-sample proportion test ‚Äî ard_stats_prop_test","text":"data (data.frame) data frame. (tidy-select) column name compare variables (tidy-select) column names compared. Must binary column coded TRUE/FALSE 1/0. Independent tests computed variable. conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... arguments passed prop.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_prop_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD 2-sample proportion test ‚Äî ard_stats_prop_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_prop_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD 2-sample proportion test ‚Äî ard_stats_prop_test","text":"","code":"mtcars |>   ard_stats_prop_test(by = vs, variables = am) #> {cards} data frame: 13 x 9 #>    group1 variable   context   stat_name stat_label      stat #> 1      vs       am stats_pr‚Ä¶    estimate  Rate Dif‚Ä¶    -0.167 #> 2      vs       am stats_pr‚Ä¶   estimate1  Group 1 ‚Ä¶     0.333 #> 3      vs       am stats_pr‚Ä¶   estimate2  Group 2 ‚Ä¶       0.5 #> 4      vs       am stats_pr‚Ä¶   statistic  X-square‚Ä¶     0.348 #> 5      vs       am stats_pr‚Ä¶     p.value    p-value     0.556 #> 6      vs       am stats_pr‚Ä¶   parameter  Degrees ‚Ä¶         1 #> 7      vs       am stats_pr‚Ä¶    conf.low  CI Lower‚Ä¶    -0.571 #> 8      vs       am stats_pr‚Ä¶   conf.high  CI Upper‚Ä¶     0.237 #> 9      vs       am stats_pr‚Ä¶      method     method 2-sample‚Ä¶ #> 10     vs       am stats_pr‚Ä¶ alternative  alternat‚Ä¶ two.sided #> 11     vs       am stats_pr‚Ä¶           p          p           #> 12     vs       am stats_pr‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> 13     vs       am stats_pr‚Ä¶     correct  Yates' c‚Ä¶      TRUE #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD t-test ‚Äî ard_stats_t_test","title":"ARD t-test ‚Äî ard_stats_t_test","text":"Analysis results data paired non-paired t-tests.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD t-test ‚Äî ard_stats_t_test","text":"","code":"ard_stats_t_test(data, variables, by = NULL, conf.level = 0.95, ...)  ard_stats_paired_t_test(data, by, variables, id, conf.level = 0.95, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD t-test ‚Äî ard_stats_t_test","text":"data (data.frame) data frame. See details. variables (tidy-select) column names compared. Independent t-tests computed variable. (tidy-select) optional column name compare . conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... arguments passed t.test() id (tidy-select) column name subject participant ID","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD t-test ‚Äî ard_stats_t_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD t-test ‚Äî ard_stats_t_test","text":"ard_stats_t_test() function, data expected one row per subject. data passed t.test(data[[variable]] ~ data[[]], paired = FALSE, ...). ard_stats_paired_t_test() function, data expected one row per subject per level. t-test calculated, data reshaped wide format one row per subject. data passed t.test(x = data_wide[[<level 1>]], y = data_wide[[<level 2>]], paired = TRUE, ...).","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD t-test ‚Äî ard_stats_t_test","text":"","code":"cards::ADSL |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   ard_stats_t_test(by = ARM, variables = c(AGE, BMIBL)) #> {cards} data frame: 28 x 9 #>    group1 variable   context   stat_name stat_label      stat #> 1     ARM      AGE stats_t_‚Ä¶    estimate  Mean Dif‚Ä¶     0.828 #> 2     ARM      AGE stats_t_‚Ä¶   estimate1  Group 1 ‚Ä¶    75.209 #> 3     ARM      AGE stats_t_‚Ä¶   estimate2  Group 2 ‚Ä¶    74.381 #> 4     ARM      AGE stats_t_‚Ä¶   statistic  t Statis‚Ä¶     0.655 #> 5     ARM      AGE stats_t_‚Ä¶     p.value    p-value     0.513 #> 6     ARM      AGE stats_t_‚Ä¶   parameter  Degrees ‚Ä¶   167.362 #> 7     ARM      AGE stats_t_‚Ä¶    conf.low  CI Lower‚Ä¶    -1.668 #> 8     ARM      AGE stats_t_‚Ä¶   conf.high  CI Upper‚Ä¶     3.324 #> 9     ARM      AGE stats_t_‚Ä¶      method     method Welch Tw‚Ä¶ #> 10    ARM      AGE stats_t_‚Ä¶ alternative  alternat‚Ä¶ two.sided #> ‚Ñπ 18 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 3 more variables: fmt_fun, warning, error  # constructing a paired data set, # where patients receive both treatments cards::ADSL[c(\"ARM\", \"AGE\")] |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>   dplyr::arrange(USUBJID, ARM) |>   ard_stats_paired_t_test(by = ARM, variables = AGE, id = USUBJID) #> {cards} data frame: 12 x 9 #>    group1 variable   context   stat_name stat_label      stat #> 1     ARM      AGE stats_t_‚Ä¶    estimate  Mean Dif‚Ä¶     0.798 #> 2     ARM      AGE stats_t_‚Ä¶   statistic  t Statis‚Ä¶     0.628 #> 3     ARM      AGE stats_t_‚Ä¶     p.value    p-value     0.531 #> 4     ARM      AGE stats_t_‚Ä¶   parameter  Degrees ‚Ä¶        83 #> 5     ARM      AGE stats_t_‚Ä¶    conf.low  CI Lower‚Ä¶    -1.727 #> 6     ARM      AGE stats_t_‚Ä¶   conf.high  CI Upper‚Ä¶     3.322 #> 7     ARM      AGE stats_t_‚Ä¶      method     method Paired t‚Ä¶ #> 8     ARM      AGE stats_t_‚Ä¶ alternative  alternat‚Ä¶ two.sided #> 9     ARM      AGE stats_t_‚Ä¶          mu    H0 Mean         0 #> 10    ARM      AGE stats_t_‚Ä¶      paired  Paired t‚Ä¶      TRUE #> 11    ARM      AGE stats_t_‚Ä¶   var.equal  Equal Va‚Ä¶     FALSE #> 12    ARM      AGE stats_t_‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test_onesample.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD one-sample t-test ‚Äî ard_stats_t_test_onesample","title":"ARD one-sample t-test ‚Äî ard_stats_t_test_onesample","text":"Analysis results data one-sample t-tests. Result may stratified including argument.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test_onesample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD one-sample t-test ‚Äî ard_stats_t_test_onesample","text":"","code":"ard_stats_t_test_onesample(   data,   variables,   by = dplyr::group_vars(data),   conf.level = 0.95,   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test_onesample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD one-sample t-test ‚Äî ard_stats_t_test_onesample","text":"data (data.frame) data frame. See details. variables (tidy-select) column names analyzed. Independent t-tests computed variable. (tidy-select) optional column name stratify results . conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... arguments passed t.test()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test_onesample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD one-sample t-test ‚Äî ard_stats_t_test_onesample","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_t_test_onesample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD one-sample t-test ‚Äî ard_stats_t_test_onesample","text":"","code":"cards::ADSL |>   ard_stats_t_test_onesample(by = ARM, variables = AGE) #> {cards} data frame: 30 x 10 #>    group1 group1_level variable   stat_name stat_label      stat #> 1     ARM      Placebo      AGE    estimate       Mean    75.209 #> 2     ARM      Placebo      AGE   statistic  t Statis‚Ä¶    81.193 #> 3     ARM      Placebo      AGE     p.value    p-value         0 #> 4     ARM      Placebo      AGE   parameter  Degrees ‚Ä¶        85 #> 5     ARM      Placebo      AGE    conf.low  CI Lower‚Ä¶    73.368 #> 6     ARM      Placebo      AGE   conf.high  CI Upper‚Ä¶    77.051 #> 7     ARM      Placebo      AGE      method     method One Samp‚Ä¶ #> 8     ARM      Placebo      AGE alternative  alternat‚Ä¶ two.sided #> 9     ARM      Placebo      AGE          mu    H0 Mean         0 #> 10    ARM      Placebo      AGE  conf.level  CI Confi‚Ä¶      0.95 #> ‚Ñπ 20 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Wilcoxon Rank-Sum Test ‚Äî ard_stats_wilcox_test","title":"ARD Wilcoxon Rank-Sum Test ‚Äî ard_stats_wilcox_test","text":"Analysis results data paired non-paired Wilcoxon Rank-Sum tests.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Wilcoxon Rank-Sum Test ‚Äî ard_stats_wilcox_test","text":"","code":"ard_stats_wilcox_test(data, variables, by = NULL, conf.level = 0.95, ...)  ard_stats_paired_wilcox_test(data, by, variables, id, conf.level = 0.95, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Wilcoxon Rank-Sum Test ‚Äî ard_stats_wilcox_test","text":"data (data.frame) data frame. See details. variables (tidy-select) column names compared. Independent tests computed variable. (tidy-select) optional column name compare . conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... arguments passed wilcox.test(...) id (tidy-select) column name subject participant ID.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Wilcoxon Rank-Sum Test ‚Äî ard_stats_wilcox_test","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD Wilcoxon Rank-Sum Test ‚Äî ard_stats_wilcox_test","text":"ard_stats_wilcox_test() function, data expected one row per subject. data passed wilcox.test(data[[variable]] ~ data[[]], paired = FALSE, ...). ard_stats_paired_wilcox_test() function, data expected one row per subject per level. test calculated, data reshaped wide format one row per subject. data passed wilcox.test(x = data_wide[[<level 1>]], y = data_wide[[<level 2>]], paired = TRUE, ...).","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Wilcoxon Rank-Sum Test ‚Äî ard_stats_wilcox_test","text":"","code":"cards::ADSL |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   ard_stats_wilcox_test(by = \"ARM\", variables = \"AGE\") #> {cards} data frame: 12 x 9 #>    group1 variable   context   stat_name stat_label      stat #> 1     ARM      AGE stats_wi‚Ä¶   statistic  X-square‚Ä¶    3862.5 #> 2     ARM      AGE stats_wi‚Ä¶     p.value    p-value     0.435 #> 3     ARM      AGE stats_wi‚Ä¶      method     method Wilcoxon‚Ä¶ #> 4     ARM      AGE stats_wi‚Ä¶ alternative  alternat‚Ä¶ two.sided #> 5     ARM      AGE stats_wi‚Ä¶          mu         mu         0 #> 6     ARM      AGE stats_wi‚Ä¶      paired  Paired t‚Ä¶     FALSE #> 7     ARM      AGE stats_wi‚Ä¶       exact      exact           #> 8     ARM      AGE stats_wi‚Ä¶     correct    correct      TRUE #> 9     ARM      AGE stats_wi‚Ä¶    conf.int   conf.int     FALSE #> 10    ARM      AGE stats_wi‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> 11    ARM      AGE stats_wi‚Ä¶    tol.root   tol.root         0 #> 12    ARM      AGE stats_wi‚Ä¶ digits.rank  digits.r‚Ä¶       Inf #> ‚Ñπ 3 more variables: fmt_fun, warning, error  # constructing a paired data set, # where patients receive both treatments cards::ADSL[c(\"ARM\", \"AGE\")] |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>   dplyr::arrange(USUBJID, ARM) |>   ard_stats_paired_wilcox_test(by = ARM, variables = AGE, id = USUBJID) #> {cards} data frame: 12 x 9 #>    group1 variable   context   stat_name stat_label      stat #> 1     ARM      AGE stats_wi‚Ä¶   statistic  X-square‚Ä¶      1754 #> 2     ARM      AGE stats_wi‚Ä¶     p.value    p-value     0.522 #> 3     ARM      AGE stats_wi‚Ä¶      method     method Wilcoxon‚Ä¶ #> 4     ARM      AGE stats_wi‚Ä¶ alternative  alternat‚Ä¶ two.sided #> 5     ARM      AGE stats_wi‚Ä¶          mu         mu         0 #> 6     ARM      AGE stats_wi‚Ä¶      paired  Paired t‚Ä¶      TRUE #> 7     ARM      AGE stats_wi‚Ä¶       exact      exact           #> 8     ARM      AGE stats_wi‚Ä¶     correct    correct      TRUE #> 9     ARM      AGE stats_wi‚Ä¶    conf.int   conf.int     FALSE #> 10    ARM      AGE stats_wi‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> 11    ARM      AGE stats_wi‚Ä¶    tol.root   tol.root         0 #> 12    ARM      AGE stats_wi‚Ä¶ digits.rank  digits.r‚Ä¶       Inf #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test_onesample.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD one-sample Wilcox Rank-sum ‚Äî ard_stats_wilcox_test_onesample","title":"ARD one-sample Wilcox Rank-sum ‚Äî ard_stats_wilcox_test_onesample","text":"Analysis results data one-sample Wilcox Rank-sum. Result may stratified including argument.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test_onesample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD one-sample Wilcox Rank-sum ‚Äî ard_stats_wilcox_test_onesample","text":"","code":"ard_stats_wilcox_test_onesample(   data,   variables,   by = dplyr::group_vars(data),   conf.level = 0.95,   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test_onesample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD one-sample Wilcox Rank-sum ‚Äî ard_stats_wilcox_test_onesample","text":"data (data.frame) data frame. See details. variables (tidy-select) column names analyzed. Independent Wilcox Rank-sum tests computed variable. (tidy-select) optional column name stratify results . conf.level (scalar numeric) confidence level confidence interval. Default 0.95. ... arguments passed wilcox.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test_onesample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD one-sample Wilcox Rank-sum ‚Äî ard_stats_wilcox_test_onesample","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_stats_wilcox_test_onesample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD one-sample Wilcox Rank-sum ‚Äî ard_stats_wilcox_test_onesample","text":"","code":"cards::ADSL |>   ard_stats_wilcox_test_onesample(by = ARM, variables = AGE) #> {cards} data frame: 27 x 10 #>    group1 group1_level variable   stat_name stat_label      stat #> 1     ARM      Placebo      AGE   statistic  t Statis‚Ä¶      3741 #> 2     ARM      Placebo      AGE     p.value    p-value         0 #> 3     ARM      Placebo      AGE      method     method Wilcoxon‚Ä¶ #> 4     ARM      Placebo      AGE alternative  alternat‚Ä¶ two.sided #> 5     ARM      Placebo      AGE          mu    H0 Mean         0 #> 6     ARM      Placebo      AGE    conf.int   conf.int     FALSE #> 7     ARM      Placebo      AGE    tol.root   tol.root         0 #> 8     ARM      Placebo      AGE digits.rank  digits.r‚Ä¶       Inf #> 9     ARM      Placebo      AGE  conf.level  CI Confi‚Ä¶      0.95 #> 10    ARM    Xanomeli‚Ä¶      AGE   statistic  t Statis‚Ä¶      3570 #> ‚Ñπ 17 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svychisq.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Survey Chi-Square Test ‚Äî ard_survey_svychisq","title":"ARD Survey Chi-Square Test ‚Äî ard_survey_svychisq","text":"Analysis results data survey Chi-Square test using survey::svychisq(). two-way comparisons supported.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svychisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Survey Chi-Square Test ‚Äî ard_survey_svychisq","text":"","code":"ard_survey_svychisq(data, by, variables, statistic = \"F\", ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svychisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Survey Chi-Square Test ‚Äî ard_survey_svychisq","text":"data (survey.design) survey design object often created {survey} package (tidy-select) column name compare . variables (tidy-select) column names compared. Independent tests computed variable. statistic (character) statistic used estimate Chisq p-value. Default Rao-Scott second-order correction (\"F\"). See survey::svychisq available statistics options. ... arguments passed survey::svychisq().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svychisq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Survey Chi-Square Test ‚Äî ard_survey_svychisq","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svychisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Survey Chi-Square Test ‚Äî ard_survey_svychisq","text":"","code":"data(api, package = \"survey\") dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)  ard_survey_svychisq(dclus1, variables = sch.wide, by = comp.imp, statistic = \"F\") #> {cards} data frame: 5 x 9 #>     group1 variable   context stat_name stat_label      stat #> 1 comp.imp sch.wide survey_s‚Ä¶       ndf  Nominato‚Ä¶         1 #> 2 comp.imp sch.wide survey_s‚Ä¶       ddf  Denomina‚Ä¶        14 #> 3 comp.imp sch.wide survey_s‚Ä¶ statistic  Statistic   236.895 #> 4 comp.imp sch.wide survey_s‚Ä¶   p.value    p-value         0 #> 5 comp.imp sch.wide survey_s‚Ä¶    method     method Pearson'‚Ä¶ #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyranktest.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Survey rank test ‚Äî ard_survey_svyranktest","title":"ARD Survey rank test ‚Äî ard_survey_svyranktest","text":"Analysis results data survey wilcox test using survey::svyranktest().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyranktest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Survey rank test ‚Äî ard_survey_svyranktest","text":"","code":"ard_survey_svyranktest(data, by, variables, test, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyranktest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Survey rank test ‚Äî ard_survey_svyranktest","text":"data (survey.design) survey design object often created survey::svydesign() (tidy-select) column name compare variables (tidy-select) column names compared. Independent tests run variable. test (string) string denote rank test use: \"wilcoxon\", \"vanderWaerden\", \"median\", \"KruskalWallis\" ... arguments passed survey::svyranktest()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyranktest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Survey rank test ‚Äî ard_survey_svyranktest","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyranktest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Survey rank test ‚Äî ard_survey_svyranktest","text":"","code":"data(api, package = \"survey\") dclus2 <- survey::svydesign(id = ~ dnum + snum, fpc = ~ fpc1 + fpc2, data = apiclus2)  ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = \"wilcoxon\") #> {cards} data frame: 6 x 9 #>     group1 variable   context   stat_name stat_label      stat #> 1 comp.imp   enroll survey_s‚Ä¶    estimate  Median o‚Ä¶    -0.106 #> 2 comp.imp   enroll survey_s‚Ä¶   statistic  Statistic    -1.719 #> 3 comp.imp   enroll survey_s‚Ä¶     p.value    p-value     0.094 #> 4 comp.imp   enroll survey_s‚Ä¶   parameter  Degrees ‚Ä¶        36 #> 5 comp.imp   enroll survey_s‚Ä¶      method     method Design-b‚Ä¶ #> 6 comp.imp   enroll survey_s‚Ä¶ alternative  Alternat‚Ä¶ two.sided #> ‚Ñπ 3 more variables: fmt_fun, warning, error ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = \"vanderWaerden\") #> {cards} data frame: 6 x 9 #>     group1 variable   context   stat_name stat_label      stat #> 1 comp.imp   enroll survey_s‚Ä¶    estimate  Median o‚Ä¶    -0.379 #> 2 comp.imp   enroll survey_s‚Ä¶   statistic  Statistic    -1.584 #> 3 comp.imp   enroll survey_s‚Ä¶     p.value    p-value     0.122 #> 4 comp.imp   enroll survey_s‚Ä¶   parameter  Degrees ‚Ä¶        36 #> 5 comp.imp   enroll survey_s‚Ä¶      method     method Design-b‚Ä¶ #> 6 comp.imp   enroll survey_s‚Ä¶ alternative  Alternat‚Ä¶ two.sided #> ‚Ñπ 3 more variables: fmt_fun, warning, error ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = \"median\") #> {cards} data frame: 6 x 9 #>     group1 variable   context   stat_name stat_label      stat #> 1 comp.imp   enroll survey_s‚Ä¶    estimate  Median o‚Ä¶    -0.124 #> 2 comp.imp   enroll survey_s‚Ä¶   statistic  Statistic    -0.914 #> 3 comp.imp   enroll survey_s‚Ä¶     p.value    p-value     0.367 #> 4 comp.imp   enroll survey_s‚Ä¶   parameter  Degrees ‚Ä¶        36 #> 5 comp.imp   enroll survey_s‚Ä¶      method     method Design-b‚Ä¶ #> 6 comp.imp   enroll survey_s‚Ä¶ alternative  Alternat‚Ä¶ two.sided #> ‚Ñπ 3 more variables: fmt_fun, warning, error ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = \"KruskalWallis\") #> {cards} data frame: 6 x 9 #>     group1 variable   context   stat_name stat_label      stat #> 1 comp.imp   enroll survey_s‚Ä¶    estimate  Median o‚Ä¶    -0.106 #> 2 comp.imp   enroll survey_s‚Ä¶   statistic  Statistic    -1.719 #> 3 comp.imp   enroll survey_s‚Ä¶     p.value    p-value     0.094 #> 4 comp.imp   enroll survey_s‚Ä¶   parameter  Degrees ‚Ä¶        36 #> 5 comp.imp   enroll survey_s‚Ä¶      method     method Design-b‚Ä¶ #> 6 comp.imp   enroll survey_s‚Ä¶ alternative  Alternat‚Ä¶ two.sided #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyttest.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Survey t-test ‚Äî ard_survey_svyttest","title":"ARD Survey t-test ‚Äî ard_survey_svyttest","text":"Analysis results data survey t-test using survey::svyttest().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Survey t-test ‚Äî ard_survey_svyttest","text":"","code":"ard_survey_svyttest(data, by, variables, conf.level = 0.95, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Survey t-test ‚Äî ard_survey_svyttest","text":"data (survey.design) survey design object often created survey::svydesign() (tidy-select) column name compare variables (tidy-select) column names compared. Independent tests run variable. conf.level (double) confidence level returned confidence interval. Must c(0, 1). Default 0.95 ... arguments passed survey::svyttest()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Survey t-test ‚Äî ard_survey_svyttest","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survey_svyttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Survey t-test ‚Äî ard_survey_svyttest","text":"","code":"data(api, package = \"survey\") dclus2 <- survey::svydesign(id = ~ dnum + snum, fpc = ~ fpc1 + fpc2, data = apiclus2)  ard_survey_svyttest(dclus2, variables = enroll, by = comp.imp, conf.level = 0.9) #> {cards} data frame: 9 x 9 #>     group1 variable   context   stat_name stat_label      stat #> 1 comp.imp   enroll survey_s‚Ä¶    estimate       Mean  -225.737 #> 2 comp.imp   enroll survey_s‚Ä¶   statistic  t Statis‚Ä¶    -2.888 #> 3 comp.imp   enroll survey_s‚Ä¶     p.value    p-value     0.007 #> 4 comp.imp   enroll survey_s‚Ä¶   parameter  Degrees ‚Ä¶        36 #> 5 comp.imp   enroll survey_s‚Ä¶      method     method Design-b‚Ä¶ #> 6 comp.imp   enroll survey_s‚Ä¶ alternative  alternat‚Ä¶ two.sided #> 7 comp.imp   enroll survey_s‚Ä¶    conf.low  CI Lower‚Ä¶   -357.69 #> 8 comp.imp   enroll survey_s‚Ä¶   conf.high  CI Upper‚Ä¶   -93.784 #> 9 comp.imp   enroll survey_s‚Ä¶  conf.level  CI Confi‚Ä¶       0.9 #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survdiff.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD for Difference in Survival ‚Äî ard_survival_survdiff","title":"ARD for Difference in Survival ‚Äî ard_survival_survdiff","text":"Analysis results data comparison survival using survival::survdiff().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survdiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD for Difference in Survival ‚Äî ard_survival_survdiff","text":"","code":"ard_survival_survdiff(formula, data, rho = 0, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survdiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD for Difference in Survival ‚Äî ard_survival_survdiff","text":"formula (formula) formula data (data.frame) data frame rho (scalar numeric) numeric scalar passed survival::survdiff(rho). Default rho=0. ... additional arguments passed survival::survdiff()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survdiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD for Difference in Survival ‚Äî ard_survival_survdiff","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survdiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD for Difference in Survival ‚Äî ard_survival_survdiff","text":"","code":"library(survival) library(ggsurvfit) #> Loading required package: ggplot2  ard_survival_survdiff(Surv_CNSR(AVAL, CNSR) ~ TRTA, data = cards::ADTTE) #> {cards} data frame: 4 x 8 #>   variable   context stat_name stat_label      stat fmt_fun #> 1     TRTA survival‚Ä¶ statistic  X^2 Stat‚Ä¶     60.27       1 #> 2     TRTA survival‚Ä¶        df  Degrees ‚Ä¶         2       1 #> 3     TRTA survival‚Ä¶   p.value    p-value         0       1 #> 4     TRTA survival‚Ä¶    method     method Log-rank‚Ä¶    NULL #> ‚Ñπ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Survival Estimates ‚Äî ard_survival_survfit","title":"ARD Survival Estimates ‚Äî ard_survival_survfit","text":"Analysis results data survival quantiles x-year survival estimates, extracted survival::survfit() model.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Survival Estimates ‚Äî ard_survival_survfit","text":"","code":"ard_survival_survfit(x, ...)  # S3 method for class 'survfit' ard_survival_survfit(x, times = NULL, probs = NULL, type = NULL, ...)  # S3 method for class 'data.frame' ard_survival_survfit(   x,   y,   variables = NULL,   times = NULL,   probs = NULL,   type = NULL,   method.args = list(conf.int = 0.95, conf.type = \"log\"),   ... )"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Survival Estimates ‚Äî ard_survival_survfit","text":"x (survfit data.frame) object class survfit created survival::survfit() data frame. See details. ... dots future extensions must empty. times (numeric) vector times return survival probabilities. probs (numeric) vector probabilities values (0,1) specifying survival quantiles return. type (string NULL) type statistic report. Available Kaplan-Meier time estimates , otherwise type ignored. Default NULL. Must one following: y (Surv string) object class Surv created using survival::Surv(). object passed left-hand side formula constructed passed survival::survfit(). object can also passed string. variables (tidy-select) stratification variables passed right-hand side formula constructed passed survival::survfit(). Default NULL unstratified model, e.g. Surv() ~ 1. method.args (named list) named list arguments passed survival::survfit().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Survival Estimates ‚Äî ard_survival_survfit","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARD Survival Estimates ‚Äî ard_survival_survfit","text":"one either times probs parameters can specified. Times provided using scale time variable used fit provided survival fit model.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit.html","id":"formula-specification","dir":"Reference","previous_headings":"","what":"Formula Specification","title":"ARD Survival Estimates ‚Äî ard_survival_survfit","text":"passing survival::survfit() object ard_survival_survfit(), survfit() call must use evaluated formula stored formula. Including proper formula call allows function accurately identify variables included estimation. See examples:   , however, pass stored formula, e.g. survfit(my_formula, lung), can use stored formulas rlang::inject(survfit(!!my_formula, lung)).","code":"library(cardx) library(survival)  # include formula in `survfit()` call survfit(Surv(time, status) ~ sex, lung) |> ard_survival_survfit(time = 500)  # you can also pass a data frame to `ard_survival_survfit()` as well. lung |>   ard_survival_survfit(y = Surv(time, status), variables = \"sex\", time = 500)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit.html","id":"variable-classes","dir":"Reference","previous_headings":"","what":"Variable Classes","title":"ARD Survival Estimates ‚Äî ard_survival_survfit","text":"survfit method called, class stratifying variables returned factor. data frame method called, original classes retained resulting ARD.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Survival Estimates ‚Äî ard_survival_survfit","text":"","code":"library(survival) library(ggsurvfit)  survfit(Surv_CNSR(AVAL, CNSR) ~ TRTA, data = cards::ADTTE) |>   ard_survival_survfit(times = c(60, 180)) #> {cards} data frame: 32 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1    TRTA      Placebo     time             60    n.risk  Number o‚Ä¶    59 #> 2    TRTA      Placebo     time             60  estimate  Survival‚Ä¶ 0.768 #> 3    TRTA      Placebo     time             60 std.error  Standard‚Ä¶ 0.047 #> 4    TRTA      Placebo     time             60 conf.high  CI Upper‚Ä¶ 0.866 #> 5    TRTA      Placebo     time             60  conf.low  CI Lower‚Ä¶ 0.682 #> 6    TRTA      Placebo     time            180    n.risk  Number o‚Ä¶    35 #> 7    TRTA      Placebo     time            180  estimate  Survival‚Ä¶ 0.626 #> 8    TRTA      Placebo     time            180 std.error  Standard‚Ä¶ 0.056 #> 9    TRTA      Placebo     time            180 conf.high  CI Upper‚Ä¶ 0.746 #> 10   TRTA      Placebo     time            180  conf.low  CI Lower‚Ä¶ 0.526 #> ‚Ñπ 22 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error  survfit(Surv_CNSR(AVAL, CNSR) ~ TRTA, data = cards::ADTTE, conf.int = 0.90) |>   ard_survival_survfit(probs = c(0.25, 0.5, 0.75)) #> {cards} data frame: 29 x 11 #>    group1 group1_level variable variable_level stat_name stat_label stat #> 1    TRTA      Placebo     prob           0.25  estimate  Survival‚Ä¶   70 #> 2    TRTA      Placebo     prob           0.25 conf.high  CI Upper‚Ä¶  110 #> 3    TRTA      Placebo     prob           0.25  conf.low  CI Lower‚Ä¶   42 #> 4    TRTA      Placebo     prob            0.5  estimate  Survival‚Ä¶   NA #> 5    TRTA      Placebo     prob            0.5 conf.high  CI Upper‚Ä¶   NA #> 6    TRTA      Placebo     prob            0.5  conf.low  CI Lower‚Ä¶   NA #> 7    TRTA      Placebo     prob           0.75  estimate  Survival‚Ä¶   NA #> 8    TRTA      Placebo     prob           0.75 conf.high  CI Upper‚Ä¶   NA #> 9    TRTA      Placebo     prob           0.75  conf.low  CI Lower‚Ä¶   NA #> 10   TRTA    Xanomeli‚Ä¶     prob           0.25  estimate  Survival‚Ä¶   14 #> ‚Ñπ 19 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error  cards::ADTTE |>   ard_survival_survfit(y = Surv_CNSR(AVAL, CNSR), variables = c(\"TRTA\", \"SEX\"), times = 90) #> {cards} data frame: 32 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    TRTA      Placebo    SEX            F     time             90    n.risk #> 2    TRTA      Placebo    SEX            F     time             90  estimate #> 3    TRTA      Placebo    SEX            F     time             90 std.error #> 4    TRTA      Placebo    SEX            F     time             90 conf.high #> 5    TRTA      Placebo    SEX            F     time             90  conf.low #> 6    TRTA      Placebo    SEX            M     time             90    n.risk #> 7    TRTA      Placebo    SEX            M     time             90  estimate #> 8    TRTA      Placebo    SEX            M     time             90 std.error #> 9    TRTA      Placebo    SEX            M     time             90 conf.high #> 10   TRTA      Placebo    SEX            M     time             90  conf.low #>    stat_label  stat #> 1   Number o‚Ä¶    27 #> 2   Survival‚Ä¶ 0.619 #> 3   Standard‚Ä¶ 0.072 #> 4   CI Upper‚Ä¶ 0.777 #> 5   CI Lower‚Ä¶ 0.493 #> 6   Number o‚Ä¶    22 #> 7   Survival‚Ä¶ 0.748 #> 8   Standard‚Ä¶ 0.077 #> 9   CI Upper‚Ä¶ 0.916 #> 10  CI Lower‚Ä¶ 0.611 #> ‚Ñπ 22 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error  # Competing Risks Example --------------------------- set.seed(1) ADTTE_MS <- cards::ADTTE %>%   dplyr::mutate(     CNSR = dplyr::case_when(       CNSR == 0 ~ \"censor\",       runif(dplyr::n()) < 0.5 ~ \"death from cancer\",       TRUE ~ \"death other causes\"     ) %>% factor()   )  survfit(Surv(AVAL, CNSR) ~ TRTA, data = ADTTE_MS) %>%   ard_survival_survfit(times = c(60, 180)) #> Multi-state model detected. Showing probabilities into state 'death from #> cancer'. #> {cards} data frame: 32 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1    TRTA      Placebo     time             60    n.risk  Number o‚Ä¶    59 #> 2    TRTA      Placebo     time             60  estimate  Survival‚Ä¶ 0.054 #> 3    TRTA      Placebo     time             60 std.error  Standard‚Ä¶ 0.026 #> 4    TRTA      Placebo     time             60 conf.high  CI Upper‚Ä¶  0.14 #> 5    TRTA      Placebo     time             60  conf.low  CI Lower‚Ä¶ 0.021 #> 6    TRTA      Placebo     time            180    n.risk  Number o‚Ä¶    35 #> 7    TRTA      Placebo     time            180  estimate  Survival‚Ä¶ 0.226 #> 8    TRTA      Placebo     time            180 std.error  Standard‚Ä¶ 0.054 #> 9    TRTA      Placebo     time            180 conf.high  CI Upper‚Ä¶ 0.361 #> 10   TRTA      Placebo     time            180  conf.low  CI Lower‚Ä¶ 0.142 #> ‚Ñπ 22 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Survival Differences ‚Äî ard_survival_survfit_diff","title":"ARD Survival Differences ‚Äî ard_survival_survfit_diff","text":"Calculate differences Kaplan-Meier estimator survival using results survival::survfit().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Survival Differences ‚Äî ard_survival_survfit_diff","text":"","code":"ard_survival_survfit_diff(x, times, conf.level = 0.95)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Survival Differences ‚Äî ard_survival_survfit_diff","text":"x (survift) object class 'survfit' typically created survival::survfit() times (numeric) vector times return survival probabilities. conf.level (scalar numeric) confidence level confidence interval. Default 0.95.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Survival Differences ‚Äî ard_survival_survfit_diff","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_survival_survfit_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Survival Differences ‚Äî ard_survival_survfit_diff","text":"","code":"library(ggsurvfit) library(survival)  survfit(Surv_CNSR() ~ TRTA, data = cards::ADTTE) |>   ard_survival_survfit_diff(times = c(25, 50)) #> {cards} data frame: 32 x 11 #>    group1 group1_level variable variable_level       stat_name stat_label #> 1    TRTA    Xanomeli‚Ä¶     time             25 reference_level  referenc‚Ä¶ #> 2    TRTA    Xanomeli‚Ä¶     time             25          method     method #> 3    TRTA    Xanomeli‚Ä¶     time             25        estimate  Survival‚Ä¶ #> 4    TRTA    Xanomeli‚Ä¶     time             25       std.error  Survival‚Ä¶ #> 5    TRTA    Xanomeli‚Ä¶     time             25       statistic  z statis‚Ä¶ #> 6    TRTA    Xanomeli‚Ä¶     time             25        conf.low  CI Lower‚Ä¶ #> 7    TRTA    Xanomeli‚Ä¶     time             25       conf.high  CI Upper‚Ä¶ #> 8    TRTA    Xanomeli‚Ä¶     time             25         p.value    p-value #> 9    TRTA    Xanomeli‚Ä¶     time             50 reference_level  referenc‚Ä¶ #> 10   TRTA    Xanomeli‚Ä¶     time             50          method     method #>         stat #> 1    Placebo #> 2  Survival‚Ä¶ #> 3      0.293 #> 4      0.067 #> 5      4.392 #> 6      0.162 #> 7      0.424 #> 8          0 #> 9    Placebo #> 10 Survival‚Ä¶ #> ‚Ñπ 22 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 4 more variables: context, fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_total_n.survey.design.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Total N ‚Äî ard_total_n.survey.design","title":"ARD Total N ‚Äî ard_total_n.survey.design","text":"Returns total N survey object. placeholder variable name returned object \"..ard_total_n..\"","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_total_n.survey.design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Total N ‚Äî ard_total_n.survey.design","text":"","code":"# S3 method for class 'survey.design' ard_total_n(data, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/ard_total_n.survey.design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Total N ‚Äî ard_total_n.survey.design","text":"data (survey.design) design object often created survey::svydesign(). ... dots future extensions must empty.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_total_n.survey.design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Total N ‚Äî ard_total_n.survey.design","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/ard_total_n.survey.design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Total N ‚Äî ard_total_n.survey.design","text":"","code":"svy_titanic <- survey::svydesign(~1, data = as.data.frame(Titanic), weights = ~Freq)  ard_total_n(svy_titanic) #> {cards} data frame: 2 x 8 #>          variable context    stat_name stat_label stat fmt_fun #> 1 ..ard_total_n.. total_n            N          N 2201    <fn> #> 2 ..ard_total_n.. total_n N_unweighted  Unweight‚Ä¶   32    <fn> #> ‚Ñπ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/cardx-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cardx: Extra Analysis Results Data Utilities ‚Äî cardx-package","title":"cardx: Extra Analysis Results Data Utilities ‚Äî cardx-package","text":"Create extra Analysis Results Data (ARD) summary objects. package supplements simple ARD functions 'cards' package, exporting functions put statistical results ARD format. objects used re-used construct summary tables, visualizations, written reports.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/cardx/reference/cardx-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cardx: Extra Analysis Results Data Utilities ‚Äî cardx-package","text":"Maintainer: Daniel D. Sjoberg danield.sjoberg@gmail.com (ORCID) Authors: Abinaya Yogasekaram abinaya.yogasekaram@contractors.roche.com Emily de la Rua emily.de_la_rua@contractors.roche.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder]","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/construction_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Construction Helpers ‚Äî construction_helpers","title":"Construction Helpers ‚Äî construction_helpers","text":"functions help construct calls various types models.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/construction_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construction Helpers ‚Äî construction_helpers","text":"","code":"construct_model(data, ...)  # S3 method for class 'data.frame' construct_model(   data,   formula,   method,   method.args = list(),   package = \"base\",   env = caller_env(),   ... )  # S3 method for class 'survey.design' construct_model(   data,   formula,   method,   method.args = list(),   package = \"survey\",   env = caller_env(),   ... )  reformulate2(   termlabels,   response = NULL,   intercept = TRUE,   env = parent.frame(),   pattern_term = NULL,   pattern_response = NULL )  bt(x, pattern = NULL)  bt_strip(x)"},{"path":"https://insightsengineering.github.io/cardx/reference/construction_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construction Helpers ‚Äî construction_helpers","text":"data construct_model.data.frame() (data.frame) data frame construct_model.survey.design() (survey.design) survey design object ... dots future extensions must empty. formula (formula) formula method (string) string function naming function called, e.g. \"glm\". function belongs library attached, package name must specified package argument. method.args (named list) named list arguments passed method. Note list may contain non-standard evaluation components. wrapping function functions, argument must passed way evaluate list, e.g. using rlang's  embrace operator {{ . }}. package (string) package name temporarily loaded function specified method executed. env environment evaluate expr. environment applicable quosures environments. termlabels character vector giving right-hand side     model formula.  May zero-length. response character string, symbol call giving left-hand     side model formula, NULL. intercept logical: formula intercept? x (character) character vector, typically variable names pattern, pattern_term, pattern_response DEPRECATED","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/construction_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construction Helpers ‚Äî construction_helpers","text":"depends calling function","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/construction_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construction Helpers ‚Äî construction_helpers","text":"construct_model(): Builds models form method(data = data, formula = formula, method.args!!!). package argument specified, package temporarily attached model evaluated. reformulate2(): copy reformulate() except variable names contain space wrapped backticks. bt(): Adds backticks character vector. bt_strip(): Removes backticks string begins ends backtick.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/construction_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construction Helpers ‚Äî construction_helpers","text":"","code":"construct_model(   data = mtcars,   formula = am ~ mpg + (1 | vs),   method = \"glmer\",   method.args = list(family = binomial),   package = \"lme4\" ) |>   broom.mixed::tidy() #> # A tibble: 3 √ó 7 #>   effect   group term            estimate std.error statistic p.value #>   <chr>    <chr> <chr>              <dbl>     <dbl>     <dbl>   <dbl> #> 1 fixed    NA    (Intercept)       -8.70      4.12      -2.11  0.0347 #> 2 fixed    NA    mpg                0.409     0.199      2.05  0.0403 #> 3 ran_pars vs    sd__(Intercept)    0.790    NA         NA    NA       construct_model(   data = mtcars |> dplyr::rename(`M P G` = mpg),   formula = reformulate2(c(\"M P G\", \"cyl\"), response = \"hp\"),   method = \"lm\" ) |>   ard_regression() |>   dplyr::filter(stat_name %in% c(\"term\", \"estimate\", \"p.value\")) #> {cards} data frame: 6 x 8 #>   variable   context stat_name stat_label    stat fmt_fun #> 1    M P G regressi‚Ä¶      term       term `M P G`    NULL #> 2    M P G regressi‚Ä¶  estimate  Coeffici‚Ä¶  -2.775       1 #> 3    M P G regressi‚Ä¶   p.value    p-value   0.213       1 #> 4      cyl regressi‚Ä¶      term       term     cyl    NULL #> 5      cyl regressi‚Ä¶  estimate  Coeffici‚Ä¶  23.979       1 #> 6      cyl regressi‚Ä¶   p.value    p-value   0.003       1 #> ‚Ñπ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-check_dichotomous_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Value Checks ‚Äî .check_dichotomous_value","title":"Perform Value Checks ‚Äî .check_dichotomous_value","text":"Check validity values passed ard_dichotomous(value).","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-check_dichotomous_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Value Checks ‚Äî .check_dichotomous_value","text":"","code":".check_dichotomous_value(data, value)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-check_dichotomous_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Value Checks ‚Äî .check_dichotomous_value","text":"data (data.frame) data frame value (named list) named list","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-check_dichotomous_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Value Checks ‚Äî .check_dichotomous_value","text":"returns invisible check successful, throws error message .","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-check_dichotomous_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Value Checks ‚Äî .check_dichotomous_value","text":"","code":"cardx:::.check_dichotomous_value(mtcars, list(cyl = 4))"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-extract_wald_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract data from wald.test object ‚Äî .extract_wald_results","title":"Extract data from wald.test object ‚Äî .extract_wald_results","text":"Extract data wald.test object","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-extract_wald_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract data from wald.test object ‚Äî .extract_wald_results","text":"","code":".extract_wald_results(wald_test)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-extract_wald_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract data from wald.test object ‚Äî .extract_wald_results","text":"wald_test (data.frame) wald test object object aod::wald.test()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-extract_wald_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract data from wald.test object ‚Äî .extract_wald_results","text":"data frame containing wald test results.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_cohens_d_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Cohen's D Test to ARD ‚Äî .format_cohens_d_results","title":"Convert Cohen's D Test to ARD ‚Äî .format_cohens_d_results","text":"Convert Cohen's D Test ARD","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_cohens_d_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Cohen's D Test to ARD ‚Äî .format_cohens_d_results","text":"","code":".format_cohens_d_results(by, variable, lst_tidy, paired, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_cohens_d_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Cohen's D Test to ARD ‚Äî .format_cohens_d_results","text":"(string) column name variable (string) variable column name lst_tidy (named list) list tidied results constructed eval_capture_conditions(), e.g. eval_capture_conditions(t.test(mtcars$mpg ~ mtcars$) |> broom::tidy()). paired TRUE, values x y considered paired. produces effect size equivalent one-sample effect size x - y. See also repeated_measures_d() options. ... passed cohens_d(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_cohens_d_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Cohen's D Test to ARD ‚Äî .format_cohens_d_results","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_cohens_d_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Cohen's D Test to ARD ‚Äî .format_cohens_d_results","text":"","code":"cardx:::.format_cohens_d_results(   by = \"ARM\",   variable = \"AGE\",   paired = FALSE,   lst_tidy =     cards::eval_capture_conditions(       effectsize::hedges_g(data[[variable]] ~ data[[by]], paired = FALSE) |>         parameters::standardize_names(style = \"broom\")     ) ) #> {cards} data frame: 8 x 9 #>   group1 variable   stat_name stat_label      stat     error #> 1    ARM      AGE    estimate  Effect S‚Ä¶           object '‚Ä¶ #> 2    ARM      AGE  conf.level  CI Confi‚Ä¶           object '‚Ä¶ #> 3    ARM      AGE    conf.low  CI Lower‚Ä¶           object '‚Ä¶ #> 4    ARM      AGE   conf.high  CI Upper‚Ä¶           object '‚Ä¶ #> 5    ARM      AGE          mu    H0 Mean         0 object '‚Ä¶ #> 6    ARM      AGE      paired  Paired t‚Ä¶     FALSE object '‚Ä¶ #> 7    ARM      AGE   pooled_sd  Pooled S‚Ä¶      TRUE object '‚Ä¶ #> 8    ARM      AGE alternative  Alternat‚Ä¶ two.sided object '‚Ä¶ #> ‚Ñπ 3 more variables: context, fmt_fun, warning"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_hedges_g_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hedge's G Test to ARD ‚Äî .format_hedges_g_results","title":"Convert Hedge's G Test to ARD ‚Äî .format_hedges_g_results","text":"Convert Hedge's G Test ARD","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_hedges_g_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hedge's G Test to ARD ‚Äî .format_hedges_g_results","text":"","code":".format_hedges_g_results(by, variable, lst_tidy, paired, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_hedges_g_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hedge's G Test to ARD ‚Äî .format_hedges_g_results","text":"(string) column name variable (string) variable column name lst_tidy (named list) list tidied results constructed eval_capture_conditions(), e.g. eval_capture_conditions(t.test(mtcars$mpg ~ mtcars$) |> broom::tidy()). paired TRUE, values x y considered paired. produces effect size equivalent one-sample effect size x - y. See also repeated_measures_d() options. ... passed hedges_g(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_hedges_g_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hedge's G Test to ARD ‚Äî .format_hedges_g_results","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_hedges_g_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hedge's G Test to ARD ‚Äî .format_hedges_g_results","text":"","code":"cardx:::.format_hedges_g_results(   by = \"ARM\",   variable = \"AGE\",   paired = FALSE,   lst_tidy =     cards::eval_capture_conditions(       effectsize::hedges_g(data[[variable]] ~ data[[by]], paired = FALSE) |>         parameters::standardize_names(style = \"broom\")     ) ) #> {cards} data frame: 8 x 9 #>   group1 variable   stat_name stat_label      stat     error #> 1    ARM      AGE    estimate  Effect S‚Ä¶           object '‚Ä¶ #> 2    ARM      AGE  conf.level  CI Confi‚Ä¶           object '‚Ä¶ #> 3    ARM      AGE    conf.low  CI Lower‚Ä¶           object '‚Ä¶ #> 4    ARM      AGE   conf.high  CI Upper‚Ä¶           object '‚Ä¶ #> 5    ARM      AGE          mu    H0 Mean         0 object '‚Ä¶ #> 6    ARM      AGE      paired  Paired t‚Ä¶     FALSE object '‚Ä¶ #> 7    ARM      AGE   pooled_sd  Pooled S‚Ä¶      TRUE object '‚Ä¶ #> 8    ARM      AGE alternative  Alternat‚Ä¶ two.sided object '‚Ä¶ #> ‚Ñπ 3 more variables: context, fmt_fun, warning"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_mcnemartest_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert McNemar's test to ARD ‚Äî .format_mcnemartest_results","title":"Convert McNemar's test to ARD ‚Äî .format_mcnemartest_results","text":"Convert McNemar's test ARD","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_mcnemartest_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert McNemar's test to ARD ‚Äî .format_mcnemartest_results","text":"","code":".format_mcnemartest_results(by, variable, lst_tidy, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_mcnemartest_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert McNemar's test to ARD ‚Äî .format_mcnemartest_results","text":"(string) column name variable (string) variable column name lst_tidy (named list) list tidied results constructed eval_capture_conditions(), e.g. eval_capture_conditions(t.test(mtcars$mpg ~ mtcars$) |> broom::tidy()). ... passed stats::mcnemar.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_mcnemartest_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert McNemar's test to ARD ‚Äî .format_mcnemartest_results","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_mcnemartest_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert McNemar's test to ARD ‚Äî .format_mcnemartest_results","text":"","code":"cardx:::.format_mcnemartest_results(   by = \"ARM\",   variable = \"AGE\",   lst_tidy =     cards::eval_capture_conditions(       stats::mcnemar.test(cards::ADSL[[\"SEX\"]], cards::ADSL[[\"EFFFL\"]]) |>         broom::tidy()     ) ) #> {cards} data frame: 5 x 9 #>   group1 variable   context stat_name stat_label      stat #> 1    ARM      AGE stats_mc‚Ä¶ statistic  X-square‚Ä¶    111.91 #> 2    ARM      AGE stats_mc‚Ä¶   p.value    p-value         0 #> 3    ARM      AGE stats_mc‚Ä¶ parameter  Degrees ‚Ä¶         1 #> 4    ARM      AGE stats_mc‚Ä¶    method     method McNemar'‚Ä¶ #> 5    ARM      AGE stats_mc‚Ä¶   correct    correct      TRUE #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_moodtest_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert mood test results to ARD ‚Äî .format_moodtest_results","title":"Convert mood test results to ARD ‚Äî .format_moodtest_results","text":"Convert mood test results ARD","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_moodtest_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert mood test results to ARD ‚Äî .format_moodtest_results","text":"","code":".format_moodtest_results(by, variable, lst_tidy, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_moodtest_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert mood test results to ARD ‚Äî .format_moodtest_results","text":"(string) column name variable (string) variable column name lst_tidy (named list) list tidied results constructed eval_capture_conditions(), e.g. eval_capture_conditions(t.test(mtcars$mpg ~ mtcars$) |> broom::tidy()). ... passed mood.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_moodtest_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert mood test results to ARD ‚Äî .format_moodtest_results","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_moodtest_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert mood test results to ARD ‚Äî .format_moodtest_results","text":"","code":"cardx:::.format_moodtest_results(   by = \"SEX\",   variable = \"AGE\",   lst_tidy =     cards::eval_capture_conditions(       stats::mood.test(ADSL[[\"AGE\"]] ~ ADSL[[\"SEX\"]]) |>         broom::tidy()     ) ) #> {cards} data frame: 4 x 9 #>   group1 variable   stat_name stat_label stat     error #> 1    SEX      AGE   statistic  Z-Statis‚Ä¶      object '‚Ä¶ #> 2    SEX      AGE     p.value    p-value      object '‚Ä¶ #> 3    SEX      AGE      method     method      object '‚Ä¶ #> 4    SEX      AGE alternative  Alternat‚Ä¶      object '‚Ä¶ #> ‚Ñπ 3 more variables: context, fmt_fun, warning"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_poissontest_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Poisson test to ARD ‚Äî .format_poissontest_results","title":"Convert Poisson test to ARD ‚Äî .format_poissontest_results","text":"Convert Poisson test ARD","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_poissontest_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Poisson test to ARD ‚Äî .format_poissontest_results","text":"","code":".format_poissontest_results(by = NULL, variables, lst_tidy, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_poissontest_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Poisson test to ARD ‚Äî .format_poissontest_results","text":"(string) column name variables (character) names event time variables lst_tidy (named list) list tidied results constructed eval_capture_conditions(), e.g. eval_capture_conditions(t.test(mtcars$mpg ~ mtcars$) |> broom::tidy()). ... passed poisson.test()","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_poissontest_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Poisson test to ARD ‚Äî .format_poissontest_results","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_poissontest_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Poisson test to ARD ‚Äî .format_poissontest_results","text":"","code":"cardx:::.format_poissontest_results(   by = \"ARM\",   variables = c(\"CNSR\", \"AVAL\"),   lst_tidy =     cards::eval_capture_conditions(       stats::poisson.test(sum(cards::ADTTE[[\"CNSR\"]]), sum(cards::ADTTE[[\"AVAL\"]])) |>         broom::tidy()     ) ) #> {cards} data frame: 10 x 9 #>    group1 variable   context   stat_name stat_label      stat #> 1     ARM     AVAL stats_po‚Ä¶    estimate  Estimate‚Ä¶     0.006 #> 2     ARM     AVAL stats_po‚Ä¶   statistic  Number o‚Ä¶       102 #> 3     ARM     AVAL stats_po‚Ä¶     p.value    p-value         0 #> 4     ARM     AVAL stats_po‚Ä¶   parameter  Expected‚Ä¶     16853 #> 5     ARM     AVAL stats_po‚Ä¶    conf.low  CI Lower‚Ä¶     0.005 #> 6     ARM     AVAL stats_po‚Ä¶   conf.high  CI Upper‚Ä¶     0.007 #> 7     ARM     AVAL stats_po‚Ä¶      method     method Exact Po‚Ä¶ #> 8     ARM     AVAL stats_po‚Ä¶ alternative  alternat‚Ä¶ two.sided #> 9     ARM     AVAL stats_po‚Ä¶  conf.level  CI Confi‚Ä¶      0.95 #> 10    ARM     AVAL stats_po‚Ä¶          mu    H0 Mean         1 #> ‚Ñπ 3 more variables: fmt_fun, warning, error"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_proptest_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert prop.test to ARD ‚Äî .format_proptest_results","title":"Convert prop.test to ARD ‚Äî .format_proptest_results","text":"Convert prop.test ARD","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_proptest_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert prop.test to ARD ‚Äî .format_proptest_results","text":"","code":".format_proptest_results(by, variable, lst_tidy, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_proptest_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert prop.test to ARD ‚Äî .format_proptest_results","text":"(string) column name variable (string) variable column name lst_tidy (named list) list tidied results constructed eval_capture_conditions(), e.g. eval_capture_conditions(t.test(mtcars$mpg ~ mtcars$) |> broom::tidy()). ... passed prop.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_proptest_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert prop.test to ARD ‚Äî .format_proptest_results","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_survfit_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Tidied Survival Fit to ARD ‚Äî .format_survfit_results","title":"Convert Tidied Survival Fit to ARD ‚Äî .format_survfit_results","text":"Convert Tidied Survival Fit ARD","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_survfit_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Tidied Survival Fit to ARD ‚Äî .format_survfit_results","text":"","code":".format_survfit_results(tidy_survfit)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_survfit_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Tidied Survival Fit to ARD ‚Äî .format_survfit_results","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_survfit_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Tidied Survival Fit to ARD ‚Äî .format_survfit_results","text":"","code":"cardx:::.format_survfit_results(   broom::tidy(survival::survfit(survival::Surv(AVAL, CNSR) ~ TRTA, cards::ADTTE)) ) #> {cards} data frame: 805 x 11 #>    variable variable_level stat_name stat_label stat fmt_fun #> 1      time              1    n.risk  Number o‚Ä¶   86       1 #> 2      time              1  estimate  Survival‚Ä¶    1       1 #> 3      time              1 std.error  Standard‚Ä¶    0       1 #> 4      time              1 conf.high  CI Upper‚Ä¶    1       1 #> 5      time              1  conf.low  CI Lower‚Ä¶    1       1 #> 6      time              2    n.risk  Number o‚Ä¶   85       1 #> 7      time              2  estimate  Survival‚Ä¶    1       1 #> 8      time              2 std.error  Standard‚Ä¶    0       1 #> 9      time              2 conf.high  CI Upper‚Ä¶    1       1 #> 10     time              2  conf.low  CI Lower‚Ä¶    1       1 #> ‚Ñπ 795 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 5 more variables: warning, error, n.event, n.censor, strata"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_ttest_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert t-test to ARD ‚Äî .format_ttest_results","title":"Convert t-test to ARD ‚Äî .format_ttest_results","text":"Convert t-test ARD","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_ttest_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert t-test to ARD ‚Äî .format_ttest_results","text":"","code":".format_ttest_results(by = NULL, variable, lst_tidy, paired, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_ttest_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert t-test to ARD ‚Äî .format_ttest_results","text":"(string) column name variable (string) variable column name lst_tidy (named list) list tidied results constructed eval_capture_conditions(), e.g. eval_capture_conditions(t.test(mtcars$mpg ~ mtcars$) |> broom::tidy()). paired logical indicating whether want paired     t-test. ... passed t.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_ttest_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert t-test to ARD ‚Äî .format_ttest_results","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_ttest_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert t-test to ARD ‚Äî .format_ttest_results","text":"","code":"cardx:::.format_ttest_results(   by = \"ARM\",   variable = \"AGE\",   paired = FALSE,   lst_tidy =     cards::eval_capture_conditions(       stats::t.test(ADSL[[\"AGE\"]] ~ ADSL[[\"ARM\"]], paired = FALSE) |>         broom::tidy()     ) ) #> {cards} data frame: 14 x 9 #>    group1 variable   stat_name stat_label  stat     error #> 1     ARM      AGE    estimate  Mean Dif‚Ä¶       cannot u‚Ä¶ #> 2     ARM      AGE   estimate1  Group 1 ‚Ä¶       cannot u‚Ä¶ #> 3     ARM      AGE   estimate2  Group 2 ‚Ä¶       cannot u‚Ä¶ #> 4     ARM      AGE   statistic  t Statis‚Ä¶       cannot u‚Ä¶ #> 5     ARM      AGE     p.value    p-value       cannot u‚Ä¶ #> 6     ARM      AGE   parameter  Degrees ‚Ä¶       cannot u‚Ä¶ #> 7     ARM      AGE    conf.low  CI Lower‚Ä¶       cannot u‚Ä¶ #> 8     ARM      AGE   conf.high  CI Upper‚Ä¶       cannot u‚Ä¶ #> 9     ARM      AGE      method     method       cannot u‚Ä¶ #> 10    ARM      AGE alternative  alternat‚Ä¶       cannot u‚Ä¶ #> 11    ARM      AGE          mu    H0 Mean     0 cannot u‚Ä¶ #> 12    ARM      AGE      paired  Paired t‚Ä¶ FALSE cannot u‚Ä¶ #> 13    ARM      AGE   var.equal  Equal Va‚Ä¶ FALSE cannot u‚Ä¶ #> 14    ARM      AGE  conf.level  CI Confi‚Ä¶  0.95 cannot u‚Ä¶ #> ‚Ñπ 3 more variables: context, fmt_fun, warning"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_wilcoxtest_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Wilcoxon test to ARD ‚Äî .format_wilcoxtest_results","title":"Convert Wilcoxon test to ARD ‚Äî .format_wilcoxtest_results","text":"Convert Wilcoxon test ARD","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_wilcoxtest_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Wilcoxon test to ARD ‚Äî .format_wilcoxtest_results","text":"","code":".format_wilcoxtest_results(by = NULL, variable, lst_tidy, paired, ...)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_wilcoxtest_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Wilcoxon test to ARD ‚Äî .format_wilcoxtest_results","text":"(string) column name variable (string) variable column name lst_tidy (named list) list tidied results constructed eval_capture_conditions(), e.g. eval_capture_conditions(t.test(mtcars$mpg ~ mtcars$) |> broom::tidy()). paired logical indicating whether want paired test. ... passed stats::wilcox.test(...)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_wilcoxtest_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Wilcoxon test to ARD ‚Äî .format_wilcoxtest_results","text":"ARD data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-format_wilcoxtest_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Wilcoxon test to ARD ‚Äî .format_wilcoxtest_results","text":"","code":"# Pre-processing ADSL to have grouping factor (ARM here) with 2 levels ADSL <- cards::ADSL |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   ard_stats_wilcox_test(by = \"ARM\", variables = \"AGE\")  cardx:::.format_wilcoxtest_results(   by = \"ARM\",   variable = \"AGE\",   paired = FALSE,   lst_tidy =     cards::eval_capture_conditions(       stats::wilcox.test(ADSL[[\"AGE\"]] ~ ADSL[[\"ARM\"]], paired = FALSE) |>         broom::tidy()     ) ) #> {cards} data frame: 12 x 9 #>    group1 variable   stat_name stat_label  stat     error #> 1     ARM      AGE   statistic  X-square‚Ä¶       cannot u‚Ä¶ #> 2     ARM      AGE     p.value    p-value       cannot u‚Ä¶ #> 3     ARM      AGE      method     method       cannot u‚Ä¶ #> 4     ARM      AGE alternative  alternat‚Ä¶       cannot u‚Ä¶ #> 5     ARM      AGE          mu         mu     0 cannot u‚Ä¶ #> 6     ARM      AGE      paired  Paired t‚Ä¶ FALSE cannot u‚Ä¶ #> 7     ARM      AGE       exact      exact       cannot u‚Ä¶ #> 8     ARM      AGE     correct    correct  TRUE cannot u‚Ä¶ #> 9     ARM      AGE    conf.int   conf.int FALSE cannot u‚Ä¶ #> 10    ARM      AGE  conf.level  CI Confi‚Ä¶  0.95 cannot u‚Ä¶ #> 11    ARM      AGE    tol.root   tol.root     0 cannot u‚Ä¶ #> 12    ARM      AGE digits.rank  digits.r‚Ä¶   Inf cannot u‚Ä¶ #> ‚Ñπ 3 more variables: context, fmt_fun, warning"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-paired_data_pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert long paired data to wide ‚Äî .paired_data_pivot_wider","title":"Convert long paired data to wide ‚Äî .paired_data_pivot_wider","text":"Convert long paired data wide","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-paired_data_pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert long paired data to wide ‚Äî .paired_data_pivot_wider","text":"","code":".paired_data_pivot_wider(data, by, variable, id)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-paired_data_pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert long paired data to wide ‚Äî .paired_data_pivot_wider","text":"data (data.frame) data frame one line per subject per group (string) column name variable (string) variable column name id (string) subject id column name","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-paired_data_pivot_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert long paired data to wide ‚Äî .paired_data_pivot_wider","text":"wide data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-paired_data_pivot_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert long paired data to wide ‚Äî .paired_data_pivot_wider","text":"","code":"cards::ADSL[c(\"ARM\", \"AGE\")] |>   dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |>   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>   dplyr::arrange(USUBJID, ARM) |>   cardx:::.paired_data_pivot_wider(by = \"ARM\", variable = \"AGE\", id = \"USUBJID\") #> # A tibble: 86 √ó 3 #>    USUBJID   by1   by2 #>      <int> <dbl> <dbl> #>  1       1    63    71 #>  2       2    64    77 #>  3       3    85    81 #>  4       4    52    75 #>  5       5    84    57 #>  6       6    79    56 #>  7       7    81    79 #>  8       8    69    56 #>  9       9    63    61 #> 10      10    81    56 #> # ‚Ñπ 76 more rows"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_nested_list_as_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Nested Lists to Column ‚Äî .process_nested_list_as_df","title":"Convert Nested Lists to Column ‚Äî .process_nested_list_as_df","text":"arguments, stat_label, passed nested lists. function properly unnests lists adds results data frame.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_nested_list_as_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Nested Lists to Column ‚Äî .process_nested_list_as_df","text":"","code":".process_nested_list_as_df(x, arg, new_column, unlist = FALSE)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_nested_list_as_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Nested Lists to Column ‚Äî .process_nested_list_as_df","text":"x (data.frame) result data frame arg (list) nested list new_column (string) new column name unlist (logical) whether fully unlist final results","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_nested_list_as_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Nested Lists to Column ‚Äî .process_nested_list_as_df","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_nested_list_as_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Nested Lists to Column ‚Äî .process_nested_list_as_df","text":"","code":"ard <- ard_categorical(cards::ADSL, by = \"ARM\", variables = \"AGEGR1\")  cardx:::.process_nested_list_as_df(ard, NULL, \"new_col\") #> {cards} data frame: 27 x 12 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1     ARM      Placebo   AGEGR1          65-80         n          n    42 #> 2     ARM      Placebo   AGEGR1          65-80         N          N    86 #> 3     ARM      Placebo   AGEGR1          65-80         p          % 0.488 #> 4     ARM      Placebo   AGEGR1            <65         n          n    14 #> 5     ARM      Placebo   AGEGR1            <65         N          N    86 #> 6     ARM      Placebo   AGEGR1            <65         p          % 0.163 #> 7     ARM      Placebo   AGEGR1            >80         n          n    30 #> 8     ARM      Placebo   AGEGR1            >80         N          N    86 #> 9     ARM      Placebo   AGEGR1            >80         p          % 0.349 #> 10    ARM    Xanomeli‚Ä¶   AGEGR1          65-80         n          n    55 #> ‚Ñπ 17 more rows #> ‚Ñπ Use `print(n = ...)` to see more rows #> ‚Ñπ 5 more variables: context, fmt_fun, warning, error, new_col"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Survival Fit For Quantile Estimates ‚Äî .process_survfit_probs","title":"Process Survival Fit For Quantile Estimates ‚Äî .process_survfit_probs","text":"Process Survival Fit Quantile Estimates","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Survival Fit For Quantile Estimates ‚Äî .process_survfit_probs","text":"","code":".process_survfit_probs(x, probs)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Survival Fit For Quantile Estimates ‚Äî .process_survfit_probs","text":"x (survfit data.frame) object class survfit created survival::survfit() data frame. See details. probs (numeric) vector probabilities values (0,1) specifying survival quantiles return.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Survival Fit For Quantile Estimates ‚Äî .process_survfit_probs","text":"tibble","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_probs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Survival Fit For Quantile Estimates ‚Äî .process_survfit_probs","text":"","code":"survival::survfit(survival::Surv(AVAL, CNSR) ~ TRTA, cards::ADTTE) |>   cardx:::.process_survfit_probs(probs = c(0.25, 0.75)) #>   estimate conf.low conf.high conf.level conf.type prob          context #> 1      142       70       181       0.95       log 0.25 survival_survfit #> 2       44       22       180       0.95       log 0.25 survival_survfit #> 3       49       37       180       0.95       log 0.25 survival_survfit #> 4      184      183       191       0.95       log 0.75 survival_survfit #> 5      188      167        NA       0.95       log 0.75 survival_survfit #> 6      184      180        NA       0.95       log 0.75 survival_survfit #>           group1_level group1 #> 1              Placebo   TRTA #> 2 Xanomeline High Dose   TRTA #> 3  Xanomeline Low Dose   TRTA #> 4              Placebo   TRTA #> 5 Xanomeline High Dose   TRTA #> 6  Xanomeline Low Dose   TRTA"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Survival Fit For Time Estimates ‚Äî .process_survfit_time","title":"Process Survival Fit For Time Estimates ‚Äî .process_survfit_time","text":"Process Survival Fit Time Estimates","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Survival Fit For Time Estimates ‚Äî .process_survfit_time","text":"","code":".process_survfit_time(x, times, type, start.time = NULL)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Survival Fit For Time Estimates ‚Äî .process_survfit_time","text":"x (survfit data.frame) object class survfit created survival::survfit() data frame. See details. times (numeric) vector times return survival probabilities. type (string NULL) type statistic report. Available Kaplan-Meier time estimates , otherwise type ignored. Default NULL. Must one following: start.time (numeric) default starting time. See survival::survfit0() details.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Survival Fit For Time Estimates ‚Äî .process_survfit_time","text":"tibble","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-process_survfit_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Survival Fit For Time Estimates ‚Äî .process_survfit_time","text":"","code":"survival::survfit(survival::Surv(AVAL, CNSR) ~ TRTA, cards::ADTTE) |>   cardx:::.process_survfit_time(times = c(60, 180), type = \"risk\") #>   time n.risk  estimate  std.error conf.high   conf.low conf.level conf.type #> 1   60     59 0.1071694 0.03599237 0.1749982 0.03376387       0.95       log #> 2   60     14 0.3060260 0.07123698 0.4324990 0.15136743       0.95       log #> 3   60     20 0.2678584 0.06803896 0.3897725 0.12158756       0.95       log #> 4  180     35 0.3490579 0.06147816 0.4590580 0.21668945       0.95       log #> 5  180      3 0.7379399 0.14042839 0.9083203 0.25091938       0.95       log #> 6  180      5 0.6191957 0.12993587 0.8048989 0.25673450       0.95       log #>   context         group1_level group1 #> 1    risk              Placebo   TRTA #> 2    risk Xanomeline High Dose   TRTA #> 3    risk  Xanomeline Low Dose   TRTA #> 4    risk              Placebo   TRTA #> 5    risk Xanomeline High Dose   TRTA #> 6    risk  Xanomeline Low Dose   TRTA"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-strata_normal_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for the Estimation of Stratified Quantiles ‚Äî .strata_normal_quantile","title":"Helper Function for the Estimation of Stratified Quantiles ‚Äî .strata_normal_quantile","text":"function wraps estimation stratified percentiles assume approximation large numbers. necessary case proportions strata unequal.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-strata_normal_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for the Estimation of Stratified Quantiles ‚Äî .strata_normal_quantile","text":"","code":".strata_normal_quantile(vars, weights, conf.level)"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-strata_normal_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for the Estimation of Stratified Quantiles ‚Äî .strata_normal_quantile","text":"weights (numeric) weights level strata. NULL, estimated using iterative algorithm minimizes weighted squared length confidence interval. conf.level (scalar numeric) scalar (0,1) indicating confidence level. Default 0.95","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-strata_normal_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for the Estimation of Stratified Quantiles ‚Äî .strata_normal_quantile","text":"Stratified quantile.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/cardx/reference/dot-strata_normal_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function for the Estimation of Stratified Quantiles ‚Äî .strata_normal_quantile","text":"","code":"strata_data <- table(data.frame(   \"f1\" = sample(c(TRUE, FALSE), 100, TRUE),   \"f2\" = sample(c(\"x\", \"y\", \"z\"), 100, TRUE),   stringsAsFactors = TRUE )) ns <- colSums(strata_data) ests <- strata_data[\"TRUE\", ] / ns vars <- ests * (1 - ests) / ns weights <- rep(1 / length(ns), length(ns))  cardx:::.strata_normal_quantile(vars, weights, 0.95) #> [1] 1.13852"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-unique_and_sorted.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD-flavor of unique() ‚Äî .unique_and_sorted","title":"ARD-flavor of unique() ‚Äî .unique_and_sorted","text":"Essentially wrapper unique(x) |> sort() NA levels removed. factors, levels returned even unobserved. Similarly, logical vectors always return c(TRUE, FALSE), even levels observed.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-unique_and_sorted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD-flavor of unique() ‚Äî .unique_and_sorted","text":"","code":".unique_and_sorted(x, useNA = c(\"no\", \"always\"))"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-unique_and_sorted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD-flavor of unique() ‚Äî .unique_and_sorted","text":"x () vector","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-unique_and_sorted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD-flavor of unique() ‚Äî .unique_and_sorted","text":"vector","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-unique_and_sorted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD-flavor of unique() ‚Äî .unique_and_sorted","text":"","code":"cards:::.unique_and_sorted(factor(letters[c(5, 5:1)], levels = letters)) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z #> Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z  cards:::.unique_and_sorted(c(FALSE, TRUE, TRUE, FALSE)) #> [1] FALSE  TRUE  cards:::.unique_and_sorted(c(5, 5:1)) #> [1] 1 2 3 4 5"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-update_weights_strat_wilson.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Function for the Estimation of Weights for proportion_ci_strat_wilson() ‚Äî .update_weights_strat_wilson","title":"Helper Function for the Estimation of Weights for proportion_ci_strat_wilson() ‚Äî .update_weights_strat_wilson","text":"function wraps iteration procedure allows estimate weights proportional strata. assumes minimize weighted squared length confidence interval.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-update_weights_strat_wilson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Function for the Estimation of Weights for proportion_ci_strat_wilson() ‚Äî .update_weights_strat_wilson","text":"","code":".update_weights_strat_wilson(   vars,   strata_qnorm,   initial_weights,   n_per_strata,   max.iterations = 50,   conf.level = 0.95,   tol = 0.001 )"},{"path":"https://insightsengineering.github.io/cardx/reference/dot-update_weights_strat_wilson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Function for the Estimation of Weights for proportion_ci_strat_wilson() ‚Äî .update_weights_strat_wilson","text":"vars (numeric) normalized proportions strata. strata_qnorm (numeric) initial estimation identical weights quantiles. initial_weights (numeric) initial weights used calculate strata_qnorm. can optimized future need estimate better initial weights. n_per_strata (numeric) number elements strata. max.iterations (count) maximum number iterations tried. Convergence always checked. conf.level (scalar numeric) scalar (0,1) indicating confidence level. Default 0.95 tol (number) tolerance threshold convergence.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/dot-update_weights_strat_wilson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Function for the Estimation of Weights for proportion_ci_strat_wilson() ‚Äî .update_weights_strat_wilson","text":"list 3 elements: n_it, weights, diff_v.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/cardx/reference/dot-update_weights_strat_wilson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper Function for the Estimation of Weights for proportion_ci_strat_wilson() ‚Äî .update_weights_strat_wilson","text":"","code":"vs <- c(0.011, 0.013, 0.012, 0.014, 0.017, 0.018) sq <- 0.674 ws <- rep(1 / length(vs), length(vs)) ns <- c(22, 18, 17, 17, 14, 12)  cardx:::.update_weights_strat_wilson(vs, sq, ws, ns, 100, 0.95, 0.001) #> $n_it #> [1] 3 #>  #> $weights #> [1] 0.2067191 0.1757727 0.1896962 0.1636346 0.1357615 0.1284160 #>  #> $diff_v #> [1] 1.458717e-01 1.497223e-03 1.442189e-06 #>"},{"path":"https://insightsengineering.github.io/cardx/reference/proportion_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for Calculating Proportion Confidence Intervals ‚Äî proportion_ci","title":"Functions for Calculating Proportion Confidence Intervals ‚Äî proportion_ci","text":"Functions calculate different proportion confidence intervals use ard_proportion().","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/proportion_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for Calculating Proportion Confidence Intervals ‚Äî proportion_ci","text":"","code":"proportion_ci_wald(x, conf.level = 0.95, correct = FALSE)  proportion_ci_wilson(x, conf.level = 0.95, correct = FALSE)  proportion_ci_clopper_pearson(x, conf.level = 0.95)  proportion_ci_agresti_coull(x, conf.level = 0.95)  proportion_ci_jeffreys(x, conf.level = 0.95)  proportion_ci_strat_wilson(   x,   strata,   weights = NULL,   conf.level = 0.95,   max.iterations = 10L,   correct = FALSE )  is_binary(x)"},{"path":"https://insightsengineering.github.io/cardx/reference/proportion_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for Calculating Proportion Confidence Intervals ‚Äî proportion_ci","text":"x (binary numeric/logical) vector binary values, .e. logical vector, numeric values c(0, 1) conf.level (scalar numeric) scalar (0,1) indicating confidence level. Default 0.95 correct (scalar logical) include continuity correction. information, see example stats::prop.test(). strata (factor) variable one level per stratum length x. weights (numeric) weights level strata. NULL, estimated using iterative algorithm minimizes weighted squared length confidence interval. max.iterations (positive integer) maximum number iterations iterative procedure used find estimates optimal weights.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/proportion_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions for Calculating Proportion Confidence Intervals ‚Äî proportion_ci","text":"Confidence interval proportion.","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/proportion_ci.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Functions for Calculating Proportion Confidence Intervals ‚Äî proportion_ci","text":"proportion_ci_wald(): Calculates Wald interval following usual textbook definition single proportion confidence interval using normal approximation. $$\\hat{p} \\pm z_{\\alpha/2} \\sqrt{\\frac{\\hat{p}(1 - \\hat{p})}{n}}$$ proportion_ci_wilson(): Calculates Wilson interval calling stats::prop.test(). Also referred Wilson score interval. $$\\frac{\\hat{p} + \\frac{z^2_{\\alpha/2}}{2n} \\pm z_{\\alpha/2} \\sqrt{\\frac{\\hat{p}(1 - \\hat{p})}{n} + \\frac{z^2_{\\alpha/2}}{4n^2}}}{1 + \\frac{z^2_{\\alpha/2}}{n}}$$ proportion_ci_clopper_pearson(): Calculates Clopper-Pearson interval calling stats::binom.test(). Also referred exact method. $$ \\left( \\frac{k}{n} \\pm z_{\\alpha/2} \\sqrt{\\frac{\\frac{k}{n}(1-\\frac{k}{n})}{n} + \\frac{z^2_{\\alpha/2}}{4n^2}} \\right) / \\left( 1 + \\frac{z^2_{\\alpha/2}}{n} \\right)$$ proportion_ci_agresti_coull(): Calculates Agresti-Coull interval (created Alan Agresti Brent Coull) (95% CI) adding two successes two failures data using Wald formula construct CI. $$ \\left( \\frac{\\tilde{p} + z^2_{\\alpha/2}/2}{n + z^2_{\\alpha/2}} \\pm z_{\\alpha/2} \\sqrt{\\frac{\\tilde{p}(1 - \\tilde{p})}{n} + \\frac{z^2_{\\alpha/2}}{4n^2}} \\right)$$ proportion_ci_jeffreys(): Calculates Jeffreys interval, equal-tailed interval based non-informative Jeffreys prior binomial proportion. $$\\left( \\text{Beta}\\left(\\frac{k}{2} + \\frac{1}{2}, \\frac{n - k}{2} + \\frac{1}{2}\\right)_\\alpha, \\text{Beta}\\left(\\frac{k}{2} + \\frac{1}{2}, \\frac{n - k}{2} + \\frac{1}{2}\\right)_{1-\\alpha} \\right)$$ proportion_ci_strat_wilson(): Calculates stratified Wilson confidence interval unequal proportions described Xin YA, Su XG. Stratified Wilson Newcombe confidence intervals multiple binomial proportions. Statistics Biopharmaceutical Research. 2010;2(3). $$\\frac{\\hat{p}_j + \\frac{z^2_{\\alpha/2}}{2n_j} \\pm z_{\\alpha/2} \\sqrt{\\frac{\\hat{p}_j(1 - \\hat{p}_j)}{n_j} + \\frac{z^2_{\\alpha/2}}{4n_j^2}}}{1 + \\frac{z^2_{\\alpha/2}}{n_j}}$$ is_binary(): Helper determine vector binary (logical 0/1)","code":""},{"path":"https://insightsengineering.github.io/cardx/reference/proportion_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions for Calculating Proportion Confidence Intervals ‚Äî proportion_ci","text":"","code":"x <- c(   TRUE, TRUE, TRUE, TRUE, TRUE,   FALSE, FALSE, FALSE, FALSE, FALSE )  proportion_ci_wald(x, conf.level = 0.9) #> $N #> [1] 10 #>  #> $n #> [1] 5 #>  #> $estimate #> [1] 0.5 #>  #> $conf.low #> [1] 0.2399258 #>  #> $conf.high #> [1] 0.7600742 #>  #> $conf.level #> [1] 0.9 #>  #> $method #> Wald Confidence Interval without continuity correction #>  proportion_ci_wilson(x, correct = TRUE) #> $N #> [1] 10 #>  #> $n #> [1] 5 #>  #> $conf.level #> [1] 0.95 #>  #> $estimate #>   p  #> 0.5  #>  #> $statistic #> X-squared  #>         0  #>  #> $p.value #> [1] 1 #>  #> $parameter #> df  #>  1  #>  #> $conf.low #> [1] 0.2365931 #>  #> $conf.high #> [1] 0.7634069 #>  #> $method #> Wilson Confidence Interval with continuity correction #>  #> $alternative #> [1] \"two.sided\" #>  proportion_ci_clopper_pearson(x) #> $N #> [1] 10 #>  #> $n #> [1] 5 #>  #> $conf.level #> [1] 0.95 #>  #> $estimate #> probability of success  #>                    0.5  #>  #> $statistic #> number of successes  #>                   5  #>  #> $p.value #> [1] 1 #>  #> $parameter #> number of trials  #>               10  #>  #> $conf.low #> [1] 0.187086 #>  #> $conf.high #> [1] 0.812914 #>  #> $method #> [1] \"Clopper-Pearson Confidence Interval\" #>  #> $alternative #> [1] \"two.sided\" #>  proportion_ci_agresti_coull(x) #> $N #> [1] 10 #>  #> $n #> [1] 5 #>  #> $estimate #> [1] 0.5 #>  #> $conf.low #> [1] 0.2365931 #>  #> $conf.high #> [1] 0.7634069 #>  #> $conf.level #> [1] 0.95 #>  #> $method #> [1] \"Agresti-Coull Confidence Interval\" #>  proportion_ci_jeffreys(x) #> $N #> [1] 10 #>  #> $n #> [1] 5 #>  #> $estimate #> [1] 0.5 #>  #> $conf.low #> [1] 0.2235287 #>  #> $conf.high #> [1] 0.7764713 #>  #> $conf.level #> [1] 0.95 #>  #> $method #> Jeffreys Interval #>  # Stratified Wilson confidence interval with unequal probabilities  set.seed(1) rsp <- sample(c(TRUE, FALSE), 100, TRUE) strata_data <- data.frame(   \"f1\" = sample(c(\"a\", \"b\"), 100, TRUE),   \"f2\" = sample(c(\"x\", \"y\", \"z\"), 100, TRUE),   stringsAsFactors = TRUE ) strata <- interaction(strata_data) n_strata <- ncol(table(rsp, strata)) # Number of strata  proportion_ci_strat_wilson(   x = rsp, strata = strata,   conf.level = 0.90 ) #> $N #> [1] 100 #>  #> $n #> [1] 49 #>  #> $estimate #> [1] 0.49 #>  #> $conf.low #> [1] 0.4072891 #>  #> $conf.high #> [1] 0.5647887 #>  #> $conf.level #> [1] 0.9 #>  #> $weights #>       a.x       b.x       a.y       b.y       a.z       b.z  #> 0.2074199 0.1776464 0.1915610 0.1604678 0.1351096 0.1277952  #>  #> $method #> Stratified Wilson Confidence Interval without continuity correction #>   # Not automatic setting of weights proportion_ci_strat_wilson(   x = rsp, strata = strata,   weights = rep(1 / n_strata, n_strata),   conf.level = 0.90 ) #> $N #> [1] 100 #>  #> $n #> [1] 49 #>  #> $estimate #> [1] 0.49 #>  #> $conf.low #> [1] 0.4190436 #>  #> $conf.high #> [1] 0.5789733 #>  #> $conf.level #> [1] 0.9 #>  #> $method #> Stratified Wilson Confidence Interval without continuity correction #>"},{"path":"https://insightsengineering.github.io/cardx/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages ‚Äî reexports","title":"Objects exported from other packages ‚Äî reexports","text":"objects imported packages. Follow links see documentation. cards ard_attributes, ard_categorical, ard_continuous, ard_dichotomous, ard_missing, ard_total_n dplyr %>%, all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, one_of, starts_with, ","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"cardx-0259002","dir":"Changelog","previous_headings":"","what":"cardx 0.2.5.9002","title":"cardx 0.2.5.9002","text":"Added function ard_categorical_abnormal() calculate ARDs abnormality analyses. (#310) Adding strata argument ard_categorical_max(). (#445, @jtalboys) Added function ard_incidence_rate() calculate ARDs incidence rate estimation. (#234) Updating fmt_fn references fmt_fun consistency. function argument cardx::foo(fmt_fn) updated cardx::foo(fmt_fun). old syntax continue function, deprecation warning users. Importantly, ARD column named \"fmt_fn\" updated \"fmt_fun\". change formally deprecated. users accessing ARD object directly modify column instead using functions like cards::update_ard_fmt_fun(), breaking change. Fix ard_survival_survfit.data.frame() method stratifying variable correctly converted back original type. Fix ard_total_n.survey.design() use update() instead dplyr::mutate(), sometimes caused downstream issue.","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"cardx-024","dir":"Changelog","previous_headings":"","what":"cardx 0.2.4","title":"cardx 0.2.4","text":"CRAN release: 2025-04-12","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"new-features-and-updates-0-2-4","dir":"Changelog","previous_headings":"","what":"New Features and Updates","title":"cardx 0.2.4","text":"Added function ard_stats_mantelhaen_test() calculate ARDs Cochran-Mantel-Haenszel test results using stats::mantelhaen.test(). (#238) Added ard_regression.data.frame() S3 method. Also converted ard_regression_basic() S3 generic added ard_regression_basic.data.frame() method (#287) Specifying ard_survfit_survfit.data.frame(variables=NULL) now creates unstratified survfit() model, previously variables argument empty. (#277) ard_survfit_survfit.data.frame(variables) now accepts tidyselect input. (#278) Added conf.level conf.type ard_survival_survfit() results. (#218) Added cards::as_cards_fun() ard_emmeans_mean_difference() error occurs user gets ARD expected ARD structure. (#132)","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"cardx-023","dir":"Changelog","previous_headings":"","what":"cardx 0.2.3","title":"cardx 0.2.3","text":"CRAN release: 2025-02-18","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"new-features-and-updates-0-2-3","dir":"Changelog","previous_headings":"","what":"New Features and Updates","title":"cardx 0.2.3","text":"Added function ard_categorical_max() calculate categorical occurrence rates maximum level per unique ID. (#240)","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"other-updates-0-2-3","dir":"Changelog","previous_headings":"","what":"Other Updates","title":"cardx 0.2.3","text":"Little n now returned results proportion_ci_*() functions, flows results ard_proportion_ci(). (#256) Added as_cards_fun() ard_categorical_ci() error, user gets ARD expected ARD structure. (#262) Update ard_categorical.survey.design() factor variables missing. variables can now tabulated, previously resulted error. Update ard_missing.survey.design() can now tabulate missing rate design variables, weights.","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"bug-fixes-0-2-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"cardx 0.2.3","text":"Fixed bug ard_survival_survfit() causing error ‚Äú=‚Äù character present stratification variable level labels. (#252) Bug fix ard_categorical_ci(denominator='cell') missing values present variable.","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"cardx-022","dir":"Changelog","previous_headings":"","what":"cardx 0.2.2","title":"cardx 0.2.2","text":"CRAN release: 2024-11-27 Added data.frame method ard_survival_survfit(). Added warning incorrect formula type ard_survival_survfit(). (#223) Implemented summary(extend=TRUE) ard_survival_survfit() return results time points bounds. (#224) Methods {survey} {survival} packages retain inputs variables types outputs. now able retain variable types ARDs returned ard_continuous.survey.design(), ard_categorical.survey.design(), ard_continuous_ci.survey.design(), ard_categorical_ci.survey.design(), ard_survival_survfit.data.frame() (notably, ard_survival_survfit.survfit()). Added function ard_stats_mantelhaen_test() calculating ARDs Cochran-Mantel-Haenszel test results using stats::mantelhaen.test(). (#238)","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"cardx-021","dir":"Changelog","previous_headings":"","what":"cardx 0.2.1","title":"cardx 0.2.1","text":"CRAN release: 2024-09-03","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"new-features-and-updates-0-2-1","dir":"Changelog","previous_headings":"","what":"New Features and Updates","title":"cardx 0.2.1","text":"Added S3 method ard_total_n.survey.design() returns ARD survey-weighted unweighted total sample size. Added warning error columns ard_regression() output. (#148) Implemented cards::as_card() needed package convert data frames class ‚Äòcard‚Äô. (#200)","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"cardx 0.2.1","text":"Bug fix ard_categorical.survey.design() unweighted statistics returned, even case explicitly requested.","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"lifecycle-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Lifecycle Changes","title":"cardx 0.2.1","text":"bt(pattern), reformulate2(pattern_term), reformulate2(pattern_response) arguments deprecated now ignored. now use make.names() determine whether column name needs wrapped backticks. (#192)","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"cardx-020","dir":"Changelog","previous_headings":"","what":"cardx 0.2.0","title":"cardx 0.2.0","text":"CRAN release: 2024-07-20","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"cardx 0.2.0","text":"Updated function names follow pattern ard_<pkgname>_<fnname>(). change immediate: previous functions names deprecated. (#106)","code":"ard_ttest()             -> ard_stats_t_test() ard_paired_ttest()      -> ard_stats_paired_t_test() ard_wilcoxtest()        -> ard_stats_wilcox_test() ard_paired_wilcoxtest() -> ard_stats_paired_wilcox_test() ard_chisqtest()         -> ard_stats_chisq_test() ard_fishertest()        -> ard_stats_fisher_test() ard_kruskaltest()       -> ard_stats_kruskal_test() ard_mcnemartest()       -> ard_stats_mcnemar_test() ard_moodtest()          -> ard_stats_mood_test()"},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"cardx 0.2.0","text":"ard_categorical_ci(value) argument added. Previously, binary variables (0/1 TRUE/FALSE) summarized. value supplied, level variable summarized independently. default, binary variables 1/TRUE level summarized. Added following functions calculating Analysis Results Datasets (ARDs). ard_stats_aov() calculating ANOVA results using stats::aov(). (#3) ard_stats_anova() calculating ANOVA results using stats::anova(). (#12) ard_stats_mcnemar_test_long() McNemar‚Äôs test long data using stats::mcnemar.test(). ard_stats_prop_test() tests proportions using stats::prop.test(). (#64) ard_stats_t_test_onesample() calculating one-sample results. ard_stats_wilcox_test_onesample() calculating one-sample results. ard_stats_oneway_test() calculating ANOVA results using stats::oneway.test(). (#3) ard_aod_wald_test() calculating Wald Tests regression models using aod::wald.test(). (#84) ard_car_anova() calculating ANOVA results using car::Anova(). (#3) ard_car_vif() calculating variance inflation factor using car::vif(). (#10) ard_effectsize_cohens_d(), ard_effectsize_paired_cohens_d(), ard_effectsize_hedges_g(), ard_effectsize_paired_hedges_g() standardized differences using effectsize::cohens_d() effectsize::hedges_g(). (#50) ard_emmeans_mean_difference() calculating least-squares mean differences using {emmeans} package. (#34) ard_smd_smd() calculating standardized mean differences using smd::smd(). (#4) ard_survival_survfit() survival analyses using survival::survfit(). (#43) ard_continuous.survey.design() calculating univariate summary statistics weighted/survey data using many functions {survey} package. (#68) ard_categorical.survey.design() tabulating summary statistics weighted/survey data using many functions {survey} package. (#140) ard_dichotomous.survey.design() tabulating dichotomous summary statistics weighted/survey data using many functions {survey} package. (#2) ard_missing.survey.design() tabulating missing summary statistics weighted/survey data using many functions {survey} package. (#2) ard_attributes.survey.design() summarizing labels attributes weighted/survey data using many functions {survey} package. ard_survey_svychisq() weighted/survey chi-squared test using survey::svychisq(). (#72) ard_survey_svyttest() weighted/survey t-tests using survey::svyttest(). (#70) ard_survey_svyranktest() weighted/survey rank tests using survey::svyranktest(). (#71) ard_survival_survdiff() creating results survival::survdiff(). (#113) ard_regression_basic() basic regression models. function focuses matching model terms underlying variables names. (#46) Updated functions ard_stats_t_test(), ard_stats_paired_t_test(), ard_stats_wilcox_test(), ard_stats_paired_wilcox_test(), ard_stats_chisq_test(), ard_stats_fisher_test(), ard_stats_kruskal_test(), ard_stats_mcnemar_test(), ard_stats_mood_test() accept multiple variables . Independent tests calculated variable. variable argument renamed variables. (#77) Updated ard_stats_t_test() ard_stats_wilcox_test() longer require argument, yields central estimates confidence intervals. (#82) Added model construction helpers, construct_model(), reformulate2(), bt(), bt_strip(). Imported cli call environment functions https://github.com/ddsjoberg/standalone/blob/main/R/standalone-cli_call_env.R implemented set_cli_abort_call user-facing functions. (#111)","code":""},{"path":"https://insightsengineering.github.io/cardx/news/index.html","id":"cardx-010","dir":"Changelog","previous_headings":"","what":"cardx 0.1.0","title":"cardx 0.1.0","text":"CRAN release: 2024-03-18 Initial release.","code":""}]
